<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机图形学 on Heng Xing Blog</title>
    <link>https://star-hengxing.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/</link>
    <description>Recent content in 计算机图形学 on Heng Xing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 20 Oct 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://star-hengxing.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 Windows 上使用 Xmake 配置 Vulkan 开发环境</title>
      <link>https://star-hengxing.github.io/post/cg/vulkan_setup/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://star-hengxing.github.io/post/cg/vulkan_setup/</guid>
      <description>也可以是C++小项目的配置&#xA;开发环境构建 vscode+xmake+clang+clangd&#xA;如果在配置过程中有问题，可以先看一下文末的FQA&#xA;C++编译工具链 Visual Studio 2022 clang 构建系统 xmake&#xA;Vulkan SDK https://www.lunarg.com/vulkan-sdk/&#xA;假装IDE的文本编辑器 Visual Studio Code&#xA;安装插件&#xA;clangd XMake Getting started 上面列出来的工具下载完成后，新建一个目录，在目录下新建xmake.lua，写入下面内容&#xA;set_project(&amp;#34;vulkan&amp;#34;) set_arch(&amp;#34;x64&amp;#34;) set_warnings(&amp;#34;all&amp;#34;) set_languages(&amp;#34;c++20&amp;#34;) set_toolchains(&amp;#34;clang&amp;#34;) add_rules(&amp;#34;mode.debug&amp;#34;, &amp;#34;mode.releasedbg&amp;#34;, &amp;#34;mode.release&amp;#34;, &amp;#34;mode.minsizerel&amp;#34;) add_requires(&amp;#34;vulkansdk&amp;#34;, &amp;#34;glfw&amp;#34;, &amp;#34;glm&amp;#34;) target(&amp;#34;main&amp;#34;) set_default(true) set_kind(&amp;#34;binary&amp;#34;) add_files(&amp;#34;src/main.cpp&amp;#34;) add_packages(&amp;#34;vulkansdk&amp;#34;, &amp;#34;glfw&amp;#34;, &amp;#34;glm&amp;#34;) 依赖的 vulkansdk 在上面已经下载，如果用他的 installer 安装会自动设置环境变量，xmake 会根据环境变量自动探测编译器、vulkansdk 的正确位置，glm 和 glfw 由 xmake 的包管理处理&#xA;编译 测试代码来自vulkan tutorial&#xA;直接新建一个main.cpp，把代码复制下来&#xA;一切配置好后，可以测试一下了&#xA;xmake xmake run 出现窗口代表环境配置成功&#xA;Intellisense xmake会在.vscode目录自动生成compile_commands.json&#xA;所以我们在.vscode/settings.json给clangd加上参数&#xA;{ &amp;#34;clangd.arguments&amp;#34;: [ &amp;#34;--compile-commands-dir=.</description>
    </item>
    <item>
      <title>渲染进阶</title>
      <link>https://star-hengxing.github.io/post/cg/%E6%B8%B2%E6%9F%93%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      <guid>https://star-hengxing.github.io/post/cg/%E6%B8%B2%E6%9F%93%E8%BF%9B%E9%98%B6/</guid>
      <description>图形笑话三则 来点图程破防乐子 无内鬼，来点图形笑话 再来点图程破防乐子 免费渲染模型 McGuire Computer Graphics Archive Rendering Resources 博客 A GRAPHICS GUY&amp;rsquo;S NOTE Computer Graphics IQ YangWC&amp;rsquo;s Blog AirGuanZ 《高级计算机图形学——真实感图像合成》目录及序言 OEOTYAN 课程 CS 87/287 | RENDERING ALGORITHMS UCSD CSE 272: Advanced Image Synthesis Advanced Graphics CSE 168 Computer Graphics II: Rendering CIS 565 GPU Programming and Architecture Fall 2022 各种效果 光谱 Simple Spectral Spectral Ray Tracing 天空 The Sky Dome Appearance Project 彩虹 Physically-based simulation of rainbows 动物毛发 An Efficient and Practical Near and Far Field Fur Reflectance Model 肥皂泡 Chemomechanical Simulation of Soap Film Flow on Spherical Bubbles FQA （其实就是把群友讨论结果收藏一下</description>
    </item>
    <item>
      <title>Chinagraph2020会前课程 真实感图形渲染科研入门 随手记录</title>
      <link>https://star-hengxing.github.io/post/cg/chinagraph2020_note/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
      <guid>https://star-hengxing.github.io/post/cg/chinagraph2020_note/</guid>
      <description>录播：Chinagraph2020&#xA;论文推荐 真实感图形渲染科研入门笔记（一）：论文推荐&#xA;工具链与参考资料 真实感图形渲染科研入门笔记（二）：工具链与参考资料&#xA;迈向科研的训练 离线 用Intel的Embree写一个光线追踪器 使用多重重要性采样 支持微表面材质 实现一个正确的BDPT 95%做渲染的科研人员都没写对BDPT(太难了)&#xA;检验：和PT的结果比较&#xA;实时 用C++封装OpenGL 支持arcball(能用鼠标拖拽的一个球，里面的物体一起动起来)，写一个VSSM 使用Optix和OpenGL实现RTRT 使用SVGF降噪 未来 材质外观的研究才刚刚开始&#xA;现在用的基本这两种&#xA;diffuse + microfacet 迪士尼原则BRDF 尽管实现很简单，但第一种对真实感渲染错的离谱&#xA;人脸的渲染也没有好的正向模型</description>
    </item>
    <item>
      <title>基于SDF的Raymarching</title>
      <link>https://star-hengxing.github.io/post/cg/sdf/</link>
      <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://star-hengxing.github.io/post/cg/sdf/</guid>
      <description>其实大部分情况下和raytracing类似&#xA;不同:&#xA;几何物体的描述 光线与几何物体求交 法线的获取 Reference iq大佬的网站 </description>
    </item>
    <item>
      <title>光线与各种几何图形求交</title>
      <link>https://star-hengxing.github.io/post/cg/%E5%85%89%E7%BA%BF%E4%B8%8E%E5%90%84%E7%A7%8D%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E6%B1%82%E4%BA%A4/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://star-hengxing.github.io/post/cg/%E5%85%89%E7%BA%BF%E4%B8%8E%E5%90%84%E7%A7%8D%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E6%B1%82%E4%BA%A4/</guid>
      <description>在一些基础的光线追踪教程中，光线求交通常发生在世界空间(world space)&#xA;但在离线渲染器中(比如PBRT)，光线求交发生在几何图形自己的局部空间(local/object/model space)&#xA;这是有好处的，比如说简化求交代码，相交表面的normal和uv也很容易计算&#xA;下面就记录一些几何求交的做法，自身经验有限，如有错误请指出&#xA;前提 这里采用的是y轴朝上的右手坐标系，-z轴指向屏幕里，x轴在右手 默认光线已经变换到对象的局部空间 使用几何体的变换矩阵和其逆矩阵，求交时将光线变换到对象空间&#xA;$$ Ray(t)=o+td (t &amp;gt; 0) $$&#xA;$$ Ray_{object}=M^{-1}Ray_{world} $$&#xA;矩形(Rectangle) 假设矩形高度为0，躺在xz平面上。长和宽控制矩形大小&#xA;忽略平行于平面的光线&#xA;if(is_zero(ray.direction.y)) return false; 使用高度计算相交点 $$ t=\frac{0 - o_{y}}{d_{y}} $$&#xA;const auto t = ray.inv_at&amp;lt;Axis::Y&amp;gt;(0); const auto [x, y, z] = ray.at(t); 在矩形范围内的点才算相交成功&#xA;if(std::abs(x) &amp;gt; length || std::abs(z) &amp;gt; width) return false; 球(Sphere) 假设球心在原点，半径控制球的大小&#xA;三维空间中球的一般方程 $$ x^{2}+y^{2}+z^{2}=r^{2} $$&#xA;将光线代入方程 $$ (o+td)^{2}=r^{2} $$&#xA;整理可得关于t的一元二次方程 $$ d^{2}t^{2}+2odt+o^{2}-r^{2}=0\ \begin{align*} &amp;amp; a=d^{2}\ &amp;amp; b=2od\ &amp;amp; c=o^{2}-r^{2} \end{align*} $$</description>
    </item>
    <item>
      <title>离线渲染-光线追踪框架学习资料</title>
      <link>https://star-hengxing.github.io/post/cg/offline_rendering/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://star-hengxing.github.io/post/cg/offline_rendering/</guid>
      <description>GAMES101:现代计算机图形学入门 网课，可在b站上观看&#xA;assignment 5-7 是光线追踪的作业&#xA;如果对光栅化，几何，动画与模拟，不感兴趣，可以只看Lecture 13-20（个人建议：把整套课看完也是不错的）&#xA;Taichi课程 课程主页&#xA;网课，其中6-7讲涉及光线追踪&#xA;Peter Shirley写的光线追踪三部曲 Ray Tracing in One Weekend Ray Tracing: The Next Week Ray Tracing: The Rest of Your Life 书中配套代码，在网上能搜到这三本的笔记和翻译版本&#xA;我认为这是光线追踪入门的最好教程&#xA;Daily Pathtracer Aras Pranckevičius大佬写的教程&#xA;介绍 博客&#xA;Nori an educational ray tracer&#xA;主页&#xA;5个assignment&#xA;PBRT Physically Based Rendering:From Theory To Implementation&#xA;这本书是学习离线渲染系统书（离线渲染圣经），配套代码在github上&#xA;网上在线阅读&#xA;此为光线追踪进阶书籍&#xA;书 Ray Tracing Gems Advanced global illumination Fundamentals of Computer Graphics Real-Time Rendering 全局光照技术 杂类 github上收集的图形学资料 milo yip的用JavaScript玩转计算机图形学-光线追踪入门 scratchapixel，图形学网站，对细节讲解很详细，配套代码 99行代码写出路径追踪-smallpt real-time-rendering，网站内附带很多图形学资料 mitsuba,一个开源渲染器 stackexchange的计算机图形学板块 </description>
    </item>
  </channel>
</rss>
