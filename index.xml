<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>恒星的小站</title>
        <link>https://star-hengxing.github.io/</link>
        <description>Recent content on 恒星的小站</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 19 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://star-hengxing.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>如何给 Xmake 打包</title>
        <link>https://star-hengxing.github.io/p/%E5%A6%82%E4%BD%95%E7%BB%99-xmake-%E6%89%93%E5%8C%85/</link>
        <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E5%A6%82%E4%BD%95%E7%BB%99-xmake-%E6%89%93%E5%8C%85/</guid>
        <description>&lt;p&gt;先来展示个 cmake 包模板。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_homepage(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://github.com/xxx/yyy&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_description(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_license(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_urls(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://github.com/xxx/yyy/archive/refs/tags/$(version).tar.gz&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://github.com/xxx/yyy.git&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_versions(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;v1.0.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_deps(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cmake&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ninja&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_install(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; configs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        table.insert(configs, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-DCMAKE_BUILD_TYPE=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;..&lt;/span&gt; (package:is_debug() &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Debug&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Release&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        table.insert(configs, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-DBUILD_SHARED_LIBS=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;..&lt;/span&gt; (package:config(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shared&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ON&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;OFF&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; package:is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; package:config(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shared&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            table.insert(configs, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=ON&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        io.replace(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CMakeLists.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, {plain &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;package.tools.cmake&amp;#34;&lt;/span&gt;).install(package, configs, {cmake_generator &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Ninja&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_test(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        assert(package:has_cxxfuncs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;, {includes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;yyy.h&amp;#34;&lt;/span&gt;}))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;观察发现，这其实和写 target 差不多，不过 api 的语义不一样而已。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/xmake-io/xmake-repo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 使用脚本生成模板&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake l scripts/new.lua github:yyy/xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在本地测试包。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake l scripts/test.lua -vD --shallow xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以添加 &lt;code&gt;-p mingw&lt;/code&gt; 或 &lt;code&gt;-k shared&lt;/code&gt; 等参数来测试不同的平台 和 configs。&lt;/p&gt;
&lt;p&gt;测试成功后，可以提交 pr。注意要 push 到 dev 分支才能触发 ci 的检测。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实选错分支也没关系，可以重新选择，然后先 close pr 再 open 来触发 ci。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;api-解读&#34;&gt;API 解读&lt;/h2&gt;
&lt;h2 id=&#34;名字&#34;&gt;名字&lt;/h2&gt;
&lt;p&gt;包名一律统一为&lt;strong&gt;小写&lt;/strong&gt;，这是规定。这是为了适配不同系统环境下，系统库的查找。&lt;/p&gt;
&lt;h3 id=&#34;version&#34;&gt;version&lt;/h3&gt;
&lt;p&gt;通常情况下，使用 git tag 作为包的版本号。如果下载 &lt;code&gt;tar.gz&lt;/code&gt; 压缩包失败，只要 url 中添加了库的 git 地址，xmake 就可以使用 git clone 并根据 tag 号切换。&lt;/p&gt;
&lt;p&gt;有些库版本号不是以 x.y.z 的形式来命名，这样 xmake 会解析失败，需要我们转换版本号。&lt;/p&gt;
&lt;p&gt;比如 directx 相关的包都是用月份+年份来命名，我们需要把他转换成用点和数字表示的日期。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; tag &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2023.06&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;jun2023&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; version &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (version) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; tag[tostring(version)] &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_versions(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2023.06&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;configs&#34;&gt;configs&lt;/h3&gt;
&lt;p&gt;对应库的构建选项。如果一些内置选项支持不完善，比如 &lt;code&gt;shared&lt;/code&gt;，就会打上 &lt;code&gt;readonly&lt;/code&gt;，表示不可修改，只能使用默认配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_configs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shared&amp;#34;&lt;/span&gt;, {description &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Build shared library.&amp;#34;&lt;/span&gt;, default &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, type &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;boolean&amp;#34;&lt;/span&gt;, readonly &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要打上 &lt;code&gt;readonly&lt;/code&gt; 的情况各有不同，比如库根本就不支持，或构建的时候有问题，打包者处理不了。&lt;/p&gt;
&lt;h3 id=&#34;on_install&#34;&gt;on_install&lt;/h3&gt;
&lt;p&gt;这一步需要调用构建系统对库 配置 -&amp;gt; 构建 -&amp;gt; 安装。&lt;/p&gt;
&lt;p&gt;最简单的，直接把 debug/release 和 shared/static 等选项传给构建系统。如果库在 Windows 上没支持动态库，我们可以尝试使用 cmake 的导出符号来支持。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; package:is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; package:config(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shared&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    table.insert(configs, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=ON&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;xmake 包默认是不保留例子和测试的，所以需要打包者添加构建选项取消。然而有些库根本没有这些选项，我们可以适当优化，比如使用 &lt;code&gt;io.replace&lt;/code&gt; 修改 cmakelists，把 &lt;code&gt;add_subdirectory(test)&lt;/code&gt; 等删掉，或者直接打个 patch 修改。&lt;/p&gt;
&lt;h3 id=&#34;on_test&#34;&gt;on_test&lt;/h3&gt;
&lt;p&gt;平时用 &lt;code&gt;has_cxxfuncs&lt;/code&gt; 系列既可以保持简洁，又可以检测到依赖的&lt;strong&gt;静态库&lt;/strong&gt;/&lt;strong&gt;动态库&lt;/strong&gt;有没有被正常链接上。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on_test(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    assert(package:has_cxxfuncs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;, {includes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;yyy.h&amp;#34;&lt;/span&gt;}))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有些 C++ 库只暴露出类接口，只能通过写相关代码进行测试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on_test(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    assert(package:check_cxxsnippets({test &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;[[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        #include &amp;lt;xxx/yyy.hpp&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        void test() {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            auto var = xxx();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    ]]&lt;/span&gt;}, {configs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {languages &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c++17&amp;#34;&lt;/span&gt;}}))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;优化库的构建&#34;&gt;优化库的构建&lt;/h2&gt;
&lt;h3 id=&#34;本地测试&#34;&gt;本地测试&lt;/h3&gt;
&lt;p&gt;因为要保持 xmake 包最小化依赖原则，实际上 cmake 包只使用系统默认的构建系统，而不是 ninja。但打包者依然可以在测试中使用 ninja 加速编译。&lt;/p&gt;
&lt;h3 id=&#34;头文件库&#34;&gt;头文件库&lt;/h3&gt;
&lt;p&gt;设置 &lt;code&gt;headeronly&lt;/code&gt; 类型后，build hash 会唯一，避免浪费硬盘。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;library&amp;#34;&lt;/span&gt;, {headeronly &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有些库可能支持非头文件模式编译，通常使用 &lt;code&gt;header_only&lt;/code&gt; 来命名 config，然后 &lt;code&gt;on_load&lt;/code&gt; 和 &lt;code&gt;on_install&lt;/code&gt; 需要做对应处理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_configs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;header_only&amp;#34;&lt;/span&gt;, {description &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Use header only version.&amp;#34;&lt;/span&gt;, default &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, type &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;boolean&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; package:config(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;header_only&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        package:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;library&amp;#34;&lt;/span&gt;, {headeronly &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on_install(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; package:config(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;header_only&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.cp(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;include&amp;#34;&lt;/span&gt;, package:installdir())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;-- 非头文件模式编译&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有些库会提供构建系统来安装头文件库，那么就要优先使用构建系统安装头文件，而不是手动拷贝。&lt;/p&gt;
&lt;h3 id=&#34;port使用-xmake-构建&#34;&gt;port（使用 xmake 构建）&lt;/h3&gt;
&lt;p&gt;当一些库没有构建系统，或者库使用的构建系统，在尝试多次但都构建失败，那么需要考虑用 xmake 本身来编译该库，这对打包者来说是一个挑战。&lt;/p&gt;
&lt;p&gt;这里先给出模板。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on_install(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io.writefile(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake.lua&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;[[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        add_rules(&amp;#34;mode.debug&amp;#34;, &amp;#34;mode.release&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        set_languages(&amp;#34;c++17&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        target(&amp;#34;xxx&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            set_kind(&amp;#34;$(kind)&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            add_files(&amp;#34;src/**.cpp&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            add_headerfiles(&amp;#34;include/**.h&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            if is_plat(&amp;#34;windows&amp;#34;) and is_kind(&amp;#34;shared&amp;#34;) then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                add_rules(&amp;#34;utils.symbols.export_all&amp;#34;, {export_classes = true})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            end
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    ]]&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;package.tools.xmake&amp;#34;&lt;/span&gt;).install(package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有时候 &lt;code&gt;xmake.lua&lt;/code&gt; 太大，影响包描述文件的简洁性，可以在包目录新建一个 &lt;code&gt;port/xmake.lua&lt;/code&gt;，然后描述文件这样写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on_install(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os.cp(path.join(package:scriptdir(), &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake.lua&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake.lua&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;package.tools.xmake&amp;#34;&lt;/span&gt;).install(package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43; 胡言乱语X3</title>
        <link>https://star-hengxing.github.io/p/c-%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%ADx3/</link>
        <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/c-%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%ADx3/</guid>
        <description>&lt;p&gt;子标题：一个第三方库需要哪些构建选项。&lt;/p&gt;
&lt;h2 id=&#34;c-runtime&#34;&gt;C Runtime&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 Linux 下编译，基本都是动态链接 glibc 吧，如果你想静态链接，或者静态链接其他 libc (如 musl)。&lt;/li&gt;
&lt;li&gt;在 Windows 下，通常都是链接 UCRT，那问题来了，应该有个选项选择 MT/MTd/MD/MDd 吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;生成动态静态库&#34;&gt;生成动态/静态库&lt;/h2&gt;
&lt;p&gt;这貌似是一个很基础的选项，没必要提出来，但事实上还是有很多开发者根本不处理（也许别人没考虑过 Windows 平台）。&lt;/p&gt;
&lt;p&gt;比如在编译静态库时用了 &lt;code&gt;#define EXPORT __declspec(dllexport)&lt;/code&gt;，但根本不需要这玩意。&lt;/p&gt;
&lt;p&gt;对编译不负责任就算了，实在偷懒可以用构建系统自带的&lt;strong&gt;导出符号&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;测试例子&#34;&gt;测试/例子&lt;/h2&gt;
&lt;p&gt;一个库总会有测试和例子，那问题来了，你不提供选项，内部也没处理，编译的时候还得顺带编译这一坨东西，但我最终只是想用 bin/lib/include 作为开发而已。&lt;/p&gt;
&lt;h2 id=&#34;依赖管理&#34;&gt;依赖管理&lt;/h2&gt;
&lt;p&gt;现在的项目管理外部依赖，通常考虑集成第三方库源码在项目里或者通过包管理下载（vcpkg/conan/CPM/FetchContent etc&amp;hellip;）。&lt;/p&gt;
&lt;p&gt;应该有一些构建选项可以让用户选择，自行下载依赖库还是使用集成在项目里的源码。但也有例外，有些项目的 cmakelists 里没有相关逻辑去选择，会直接用 CPM/FetchContent 下载依赖，直接打满硬盘空间，这就很可怕。不过这点可以通过加硬盘处理。&lt;/p&gt;
&lt;p&gt;但要命的是，有时候会出现几个依赖库，本身也依赖了同一个库的情况，项目在编译链接的时候大概率报错失败，因为违反了 odr 原则，符号冲突了。不过大部分包管理也很难解决级联依赖的冲突，所以还是要要自己手工处理依赖，而依赖库可以提供选择自行下载依赖选项就好了。&lt;/p&gt;
&lt;h2 id=&#34;address-sanitizer&#34;&gt;Address Sanitizer&lt;/h2&gt;
&lt;p&gt;现在编译器已经普及了这一技术，然而很多开发者根本不知道有这玩意，或者知道了但没去开启 asan 。除了自己代码开 asan，所依赖的库最好也开启 asan 编译效果才最佳，否则有机率会出现 &amp;ldquo;假阳性&amp;rdquo;。&lt;/p&gt;
&lt;h2 id=&#34;未完待续&#34;&gt;未完待续&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>Xmake 新手教程</title>
        <link>https://star-hengxing.github.io/p/xmake-%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/</link>
        <pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/xmake-%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/</guid>
        <description>&lt;p&gt;构建系统的文档好像都有一个老毛病，就是不太适合新手去阅读（官方教程过于简短）。一些人认为文档写得很混乱，cmake/xmake/meson 都是如此，因此有了这个教程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新手，是指了解 c/c++ 基础的编译链接，并不是对计算机科学（用过至少一门编程语言）一无所知的萌新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里还有两份教程可以互相参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/column/c_1537535487199281152&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;A Tour of xmake 一份非官方的xmake教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://tboox.org/cn/2019/11/09/quickstart-1-installation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xmake从入门到精通1：安装和更新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想看类似于 meson 的 &lt;a class=&#34;link&#34; href=&#34;https://mesonbuild.com/howtox.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How do I do X in Meson?&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;https://mesonbuild.com/FAQ.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Frequently Asked Questions&lt;/a&gt;，请看另一篇文章： &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/611388172&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xmake 常见问题解答&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;xmake 的官方交流群，可以查看&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/about/contact&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文档&lt;/a&gt;自行添加。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;这部分&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/guide/installation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文档&lt;/a&gt;写得很清楚，在各自的平台用对应的包管理安装即可，另外使用 Windows 系统的读者需要注意两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自行下载压缩包然后解压到某个目录，确保该目录没有其他东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;曾有人解压到了软件目录，里面有其他软件，然后卸载 xmake 的时候，把其他软件也删了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;想通过源码的方式编译安装，需要提前装好一个 xmake，因为 xmake 源码由 c + lua 组成，c 源码需要 xmake 自己编译，也就是&amp;quot;自举&amp;quot;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开命令行，输入&lt;code&gt;xmake --version&lt;/code&gt;验证一下是否正确安装。&lt;/p&gt;
&lt;h2 id=&#34;hello-world&#34;&gt;Hello world&lt;/h2&gt;
&lt;p&gt;这里先介绍怎么编译一个 hello world 工程。&lt;/p&gt;
&lt;p&gt;打开命令行，输入&lt;code&gt;xmake create hello&lt;/code&gt;，用 xmake 生成自带的 hello world 模板。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ xmake create hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;create hello ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;: src/main.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;: xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;: .gitignore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;create ok!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假如你已经安装好了 c/c++ 编译器（msvc/gcc/clang），我们可以直接编译运行，并看到打印出了 hello world。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ xmake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ xmake run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello world!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;在 Windows 上，请不要在 git 自带的终端上执行 xmake 命令，可以选择使用 cmd 或 powershell，或者在执行 xmake 命令前，先指定目标平台：&lt;code&gt;xmake f -p windows&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Linux 上，xmake 默认编译器是 gcc ，Windows 则是 msvc。clang 在两个平台都可以使用，我们可以在命令行切换工具链进行编译。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ xmake f --toolchain&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;clang
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ xmake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ xmake run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello world!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;编码&#34;&gt;编码&lt;/h2&gt;
&lt;p&gt;现在最基本的编译已经完成了，但我们怎么写代码呢？这里介绍几个常用的文本编辑器。&lt;/p&gt;
&lt;h3 id=&#34;visual-studio&#34;&gt;Visual Studio&lt;/h3&gt;
&lt;p&gt;下面命令会生成 sln 工程，点开后和平时使用 vs 写代码一样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake project -k vsxmake -m &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debug,release&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;visual-studio-code&#34;&gt;Visual Studio Code&lt;/h3&gt;
&lt;p&gt;vscode 是 xmake 支持度最高（vscode 插件比较好开发）的编辑器，只需要安装 xmake 插件，然后挑选一个你喜欢的 intellisense 插件即可。&lt;/p&gt;
&lt;p&gt;假如你使用 clangd + codelldb（clangd 是语法提示/补全工具，codelldb 是调试工具），因为 xmake 插件默认在 .vscode 目录下生成 compile_commands.json，那么只要在&lt;code&gt;.vscode/settings.json&lt;/code&gt;写下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;clangd.arguments&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--compile-commands-dir=.vscode&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;xmake.debugConfigType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;codelldb&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候点开 src/main.cpp 文件，clangd 会自动运行，vscode 算是配置完成了，是不是很简单。&lt;/p&gt;
&lt;p&gt;如果想用 cpptools（微软的 c++ 插件），请参考&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/plugin/more_plugins&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方演示视频：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1sF411E7DA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.bilibili.com/video/BV1sF411E7DA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=yAYYuXmPXPc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=yAYYuXmPXPc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clion&#34;&gt;Clion&lt;/h3&gt;
&lt;p&gt;目前来说，clion 的 xmake 插件是不可用状态，只能靠生成 cmakelists 来支持 clion。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake project -k cmakelists
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;p&gt;没介绍的文本编辑器请看&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/plugin/builtin_plugins&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文档&lt;/a&gt;。此外，一个小众的国产 c/c++ 编辑器 &lt;a class=&#34;link&#34; href=&#34;https://gitee.com/scu319hy/edx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;edx&lt;/a&gt; 也支持了 xmake，可以玩玩。&lt;/p&gt;
&lt;h2 id=&#34;hello-world-模板解析&#34;&gt;Hello world 模板解析&lt;/h2&gt;
&lt;p&gt;部署了开发环境，回顾一下刚刚的生成的 xmake.lua。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.debug&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.release&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;工程需要至少一种构建类型（build type），常见的有 debug/release，可以通过&lt;code&gt;xmake f -m &amp;lt;build type&amp;gt;&lt;/code&gt;切换构建类型。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;add_rules(&amp;quot;mode.debug&amp;quot;, &amp;quot;mode.release&amp;quot;)&lt;/code&gt;使用了 xmake 内置的编译参数，也就是说，xmake 帮我们写好了这些代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_mode(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debug&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_symbols(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debug&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_optimize(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;elseif&lt;/span&gt; is_mode(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;release&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_symbols(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_optimize(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fastest&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_strip(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_cxflags(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-DNDEBUG&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过判断构建类型，设置了不同的参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;symbols -&amp;gt; 设置生成符号信息，这样才可以调试我们的程序，hidden 表示符号不可见。&lt;/li&gt;
&lt;li&gt;optimize -&amp;gt; 优化等级（等级越高，程序运行越快），none 表示不需要优化。&lt;/li&gt;
&lt;li&gt;strip -&amp;gt; 去掉符号，all 表示链接的时候，strip 掉所有符号，包括调试符号。&lt;/li&gt;
&lt;li&gt;cxflags -&amp;gt; 给 c/c++ 添加编译选项，&lt;code&gt;-DNDEBUG&lt;/code&gt;就是塞了一个&lt;code&gt;NDEBUG&lt;/code&gt;宏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了构建类型，工程还需要至少一个构建目标（target），&lt;code&gt;target(&amp;quot;hello&amp;quot;)&lt;/code&gt;代表新建一个目标，并命名为 hello。后面所有的设置，都只会对这个目标生效。目标类型可以是静态库（static），也可以是动态库（shared），当然最常见的是可执行程序（binary），对应上面的 xmake.lua 就是&lt;code&gt;set_kind(&amp;quot;binary&amp;quot;)&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;除了上面这三种类型，&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/manual/project_target?id=targetset_kind&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;set_kind&lt;/a&gt; 还支持 phony/object/headeronly 类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;add_files 是一个很强大的接口，这里只简单介绍，详细可以去看&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/manual/project_target?id=targetadd_files&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;是通配符，可以根据文件后缀匹配一批符合要求的文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; -&amp;gt; 在目录内添加文件。假如 src 目录下有 hello.cpp 和 world.cpp 文件，&lt;code&gt;add_files(&amp;quot;src/*.cpp&amp;quot;)&lt;/code&gt;只会把 hello.cpp 和 world.cpp 添加进去。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - hello.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - world.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- main.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt; -&amp;gt; 递归目录添加文件。假如 src 目录下有 hello.cpp，src 目录下还有一个 tmp 目录，里面有一个 world.cpp 文件，&lt;code&gt;add_files(&amp;quot;src/**.cpp&amp;quot;)&lt;/code&gt;还是只会把 hello.cpp 和 world.cpp 添加进去。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - hello.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - tmp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - world.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- main.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;命令行解析&#34;&gt;命令行解析&lt;/h2&gt;
&lt;p&gt;在上面我们用到了许多命令，比如&lt;code&gt;xmake f -m debug&lt;/code&gt;，其实完整命令如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake config --mode&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;debug
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个工程需要先配置（config）后构建（build），在&lt;strong&gt;新&lt;/strong&gt;工程中，直接执行&lt;code&gt;xmake&lt;/code&gt;命令，代表使用&lt;strong&gt;默认配置&lt;/strong&gt;直接构建。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xmake --help&lt;/code&gt;可以输出 xmake 的命令行操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake v2.7.9+HEAD.c87922676, A cross-platform build utility based on Lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Copyright &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;C&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; 2015-present Ruki Wang, tboox.org, xmake.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         _
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __  ___ __  __  __ _| | ______
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;\ \/&lt;/span&gt; / |  &lt;span style=&#34;color:#f1fa8c&#34;&gt;\/&lt;/span&gt;  |/ _  | |/ / __ &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;     &amp;gt;  &amp;lt;  | &lt;span style=&#34;color:#f1fa8c&#34;&gt;\_&lt;/span&gt;_/ | /_| |   &amp;lt;  ___/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /_/&lt;span style=&#34;color:#f1fa8c&#34;&gt;\_\_&lt;/span&gt;|_|  |_|&lt;span style=&#34;color:#f1fa8c&#34;&gt;\_&lt;/span&gt;_ &lt;span style=&#34;color:#f1fa8c&#34;&gt;\|&lt;/span&gt;_|&lt;span style=&#34;color:#f1fa8c&#34;&gt;\_\_&lt;/span&gt;___|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         by ruki, xmake.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    👉  Manual: https://xmake.io/#/getting_started
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    🙏  Donate: https://xmake.io/#/sponsor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$xmake&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;task&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;target&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Build targets &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; no given tasks.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Actions:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b, build             Build targets &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; no given tasks.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u, uninstall         Uninstall the project binary files.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i, install           Package and install the target binary files.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    q, require           Install and update required packages.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p, package           Package target.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c, clean             Remove all binary and temporary files.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f, config            Configure the project.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       service           Start service &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; remote or distributed compilation and etc.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       update            Update and uninstall the xmake program.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r, run               Run the project target.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       create            Create a new project.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g, global            Configure the global options &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; xmake.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Actions 中，最常用的是&lt;code&gt;config/build/run&lt;/code&gt;。输入&lt;code&gt;xmake config --help&lt;/code&gt;，则会打印子选项更多操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文大多数命令使用简写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;通用操作&#34;&gt;通用操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-h|--help&lt;/code&gt; -&amp;gt; 帮助信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v|--verbose&lt;/code&gt; -&amp;gt; 输出更多的信息。在构建时使用这个命令，可以看到 xmake 调用编译器的每一步。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D|--diagnosis&lt;/code&gt; -&amp;gt; 通常用于调试 xmake 本身。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这些简写通常可以合并在一起操作，比如&lt;code&gt;xmake -vD&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;action-常用操作&#34;&gt;action 常用操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xmake f -c&lt;/code&gt; -&amp;gt; 清除当前 xmake 工程的缓存。当你遇到了无法解决的问题，可以先来一发这个命令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xmake f -p mingw&lt;/code&gt; -&amp;gt; 指定构建目标平台。在 Windows 系统上默认平台是 &lt;code&gt;windows&lt;/code&gt;，想要在 mingw/msys2 平台编译，需要手动切换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xmake f -P ../projectdir -o ../build&lt;/code&gt; -&amp;gt; 把工作目录和构建目录放在其他地方。保持源码目录整洁，适合洁癖。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- build &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;generated&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- workdir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - .xmake &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;generated&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- projectdir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - src 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xmake build -r&lt;/code&gt; -&amp;gt; 重新编译整个工程，&lt;code&gt;xmake build -r target&lt;/code&gt;则是重新编译指定 target。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xmake build -j4&lt;/code&gt; -&amp;gt; xmake 默认多线程（根据 cpu 核心数）编译跑满 CPU 所有核心，&lt;code&gt;-j4&lt;/code&gt;调整并行编译任务数，。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当工程 config 后，&lt;code&gt;xmake -r&lt;/code&gt;和&lt;code&gt;xmake -j4&lt;/code&gt;和上面是完全等价的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xmake run -d target&lt;/code&gt; -&amp;gt; 启动调试器调试指定 target。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;包管理&#34;&gt;包管理&lt;/h2&gt;
&lt;p&gt;xmake 的包管理十分强大，除了自动下载依赖库源码编译安装，还可以使用其他包管理的库。&lt;/p&gt;
&lt;p&gt;包可以分类为系统库和非系统库，系统库是最稳定的，但基本是版本固定的预编译二进制，不太灵活。而非系统库直接拉取源码编译，可以最大化自定义操作（比如调整编译参数、只启用包的某个组件等）。&lt;/p&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;修改一下 hello world 模板。这里使用了一个比较知名的库（已经加入了 c++20 标准库）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.debug&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.release&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_packages(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;引入 fmt 库就这么简单，只需要&lt;code&gt;add_requires&lt;/code&gt;和&lt;code&gt;add_packages&lt;/code&gt;。然后执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake f -y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;如果不使用&lt;code&gt;-y&lt;/code&gt;，那么下载依赖的时候需要手动确认。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;依赖下载在 config 阶段，只有正确编译测试包才算成功安装。如果想知道下载编译安装的全过程，可以使用&lt;code&gt;xmake f -vD&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于不可描述原因，源码可能会下载失败，请根据&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/package/remote_package?id=%e8%ae%be%e7%bd%ae%e4%bb%a3%e7%90%86&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文档&lt;/a&gt;为 xmake 挂上代理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;系统库&#34;&gt;系统库&lt;/h3&gt;
&lt;p&gt;系统库通常都是从系统官方包管理（apt/pacman/homebrew）下载的包。默认情况下 xmake 会先去找系统库，如果没有才下载远程包，基本上只有在非 Windows 平台才需要考虑是否使用系统库，我们也可以通过&lt;code&gt;add_requires&lt;/code&gt;传入参数强制 xmake 使用系统库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;zlib&amp;#34;&lt;/span&gt;, {system &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们也可以直接指定想用的系统包。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;brew::zlib&amp;#34;&lt;/span&gt;, {alias &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;zlib&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pacman::zlib&amp;#34;&lt;/span&gt;, {alias &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;zlib&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pkgconfig::zlib&amp;#34;&lt;/span&gt;, {alias &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;zlib&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- 第三方包管理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;vcpkg::zlib&amp;#34;&lt;/span&gt;, {alias &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;zlib&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;conan::zlib&amp;#34;&lt;/span&gt;, {alias &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;zlib&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;设置了 alias，我们只需要&lt;code&gt;add_packages(&amp;quot;zlib&amp;quot;)&lt;/code&gt;而不是&lt;code&gt;add_packages(&amp;quot;brew::zlib&amp;quot;)&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Windows 平台，有些库需要使用它的预编译二进制进行开发，如 cuda/vulkansdk/qt。执行&lt;code&gt;xmake f -h&lt;/code&gt;，可以看到 qt 和 cuda 是可配置选项，可以直接用&lt;code&gt;xmake f --qt=&lt;/code&gt;或者&lt;code&gt;xmake f --cuda=&lt;/code&gt;指定 sdk 目录。&lt;/p&gt;
&lt;p&gt;但选项中没有 vulkansdk，因为 cuda/qt 是 c++ 大生态的一部分，xmake 内部都对此做了支持。这种情况下，执行&lt;code&gt;xrepo search vulkansdk&lt;/code&gt;查找包。如果搜索结果显示有这个包，那就和上面引入 fmt 库操作一样。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;xrepo search &amp;lt;package&amp;gt;&lt;/code&gt; 基于包名和包描述模糊搜索，如果想用的包搜不到，大概率是 xmake 官方还没有支持这个库，可以尝试提 pull request 贡献或者 feature request 的 issue。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果显示安装&lt;code&gt;vulkansdk&lt;/code&gt;失败，可以去提 issue 或者自行排除错误。因为 Windows 平台上的系统包通常都是基于环境变量和注册表来查找 sdk 目录，然后提取头文件和库目录。这些环境变量和注册表时在官方安装器安装时设置的，如果下载的是便携版（压缩包解压开箱即用），那么需要自己去设置环境变量等操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;xrepo 是 xmake 包管理的名字，类似于 meson 的 wrap。如果你查看 xrepo 的脚本，发现实质上还是调用 xmake。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;非系统库远程依赖&#34;&gt;非系统库（远程依赖）&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake-repo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xmake-repo&lt;/a&gt; 是 xmake 的官方包管理仓库，上面存放的是各种包的编译脚本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大多数包是从 github 上下载，其他包管理也是这么做。&lt;/li&gt;
&lt;li&gt;大多数包都是下载源码&lt;strong&gt;本地&lt;/strong&gt;编译安装，小部分是下载预编译二进制。如果在 config 阶段卡住了，那基本上都是卡在编译阶段。&lt;/li&gt;
&lt;li&gt;需要编译的包，大多数是用库自己的构建系统（cmake/meson/makefile）来进行构建，然后把 bin/lib/include 安装到 xmake 指定的位置，这像是包了一层胶水。如果库构建失败，xmake-repo 的打包者则会尝试使用 xmake 来构建此库。&lt;/li&gt;
&lt;li&gt;包的存放路径可以执行&lt;code&gt;xmake show&lt;/code&gt;查看&lt;code&gt;packagedir&lt;/code&gt;，基本上都是按这种规范存放：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - fmt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - hash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - bin -&amp;gt; .dll/.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - lib -&amp;gt; .lib/.a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - include -&amp;gt; .h/.hpp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;可以通过改变 xmake 的&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/guide/configuration?id=%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;环境变量&lt;/a&gt;来切换包的存放路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;xmake 支持改变包的编译配置。比如包默认是静态库，我们可以传入 configs 使其编译成动态库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;zlib&amp;#34;&lt;/span&gt;, {configs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {shared &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;}})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们还可以传入 debug/pic/lto/vs_runtime 等 configs，这些都是 xmake &lt;strong&gt;内置&lt;/strong&gt;的 configs。&lt;/p&gt;
&lt;p&gt;而在 c/c++ 生态中，每个包都会有自己的编译选项。fmt 是一个头文件库，他支持&lt;strong&gt;非头文件&lt;/strong&gt;的方式编译，那么可以传入对应 configs 来编译成动态库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;, {configs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {header_only &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;, shared &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;}})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正因为包可以用不同 configs 来编译，所以 xmake 会对这些 configs 生成唯一 hash，这也是为什么同一个包同一个版本，还会有多个编译产物。&lt;/p&gt;
&lt;p&gt;想了解对应包更多的 configs 选项，执行&lt;code&gt;xrepo info &amp;lt;package&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;其他-1&#34;&gt;其他&lt;/h3&gt;
&lt;p&gt;xmake 的包管理还有许多功能，比如指定包的&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/package/remote_package?id=%e8%af%ad%e4%b9%89%e7%89%88%e6%9c%ac%e8%ae%be%e7%bd%ae&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;不同版本&lt;/a&gt;，版本可以精确到 git tag/branch/commit，还有适合内部开发的&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/package/remote_package?id=%e4%bd%bf%e7%94%a8%e8%87%aa%e5%bb%ba%e7%a7%81%e6%9c%89%e5%8c%85%e4%bb%93%e5%ba%93&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;自建包仓库&lt;/a&gt;，更多功能可以看这篇文章：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/479977993&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xmake 和 C/C++ 包管理&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;编写-xmakelua&#34;&gt;编写 xmake.lua&lt;/h2&gt;
&lt;p&gt;在介绍完一些基础的操作后，本文开始讲解各种基础用法。&lt;/p&gt;
&lt;h3 id=&#34;规范&#34;&gt;规范&lt;/h3&gt;
&lt;p&gt;xmake.lua 基于 lua 编程语言，所有语句必须符合 lua 的语法。&lt;/p&gt;
&lt;p&gt;正如其他构建系统一样，文档上各种 api 其实就是 xmake 自定义的 dsl(Domain-specific language)，方便用户使用。虽然有很多人讨厌 lua，但实际上，我们有 80% 的时间在使用 xmake 的 dsl 写描述文件，20% 的时间才可能用到 lua 进行编程。&lt;/p&gt;
&lt;p&gt;如果有 xmake 的 dsl 不能完成的操作，我们完全可以退化到用 lua 来完成，对比使用其他构建系统的 dsl 进行编程，lua 写起来不至于那么讨厌了。&lt;/p&gt;
&lt;p&gt;xmake 的 api 基于官方指定的&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/manual/specification&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;命名规范&lt;/a&gt;，非常容易理解，比如接口末尾有&lt;code&gt;s&lt;/code&gt;代表可以传入至少两个参数。&lt;/p&gt;
&lt;h3 id=&#34;作用域&#34;&gt;作用域&lt;/h3&gt;
&lt;p&gt;假设我们的工程目录长这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - include
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - base.hpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - base
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - base.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - sandbox
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - main.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编写对应的 xmake.lua。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.debug&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.release&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_includedirs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;include&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;base&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;static&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/base/*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sandbox&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/sandbox/*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_packages(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;相比 hello world 模板，我们使用了&lt;code&gt;add_includedirs&lt;/code&gt;来添加头文件的&lt;strong&gt;目录&lt;/strong&gt;，并声明了两个 target，其中一个 target 类型是静态库，另一个是可执行程序。&lt;/p&gt;
&lt;p&gt;在 base.cpp 编码的时候，你会发现引用不了 fmt 头文件，上面讲过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;声明新目标后，后面所有的设置都只会对这个目标生效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里修正一下：声明新目标后，我们就进入了该目标的描述域，所有的设置只会对这个 target 生效。&lt;/p&gt;
&lt;p&gt;那在 target 之外就是全局作用域了。&lt;/p&gt;
&lt;p&gt;把&lt;code&gt;add_packages(&amp;quot;fmt&amp;quot;)&lt;/code&gt;放在&lt;code&gt;add_requires(&amp;quot;fmt&amp;quot;)&lt;/code&gt;语句后面，也就是放到全局作用域，为所有 target 都添加了 fmt 的依赖，就能在任何 cpp 文件引用 fmt 头文件了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- 在全局作用域设置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_packages(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_includedirs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;include&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;add_rules&lt;/code&gt;和&lt;code&gt;add_includedirs&lt;/code&gt;这些接口同理，所以所有 target 都享受到了同样的配置，都能引用 base.hpp 这个头文件。&lt;/p&gt;
&lt;h3 id=&#34;多级配置&#34;&gt;多级配置&lt;/h3&gt;
&lt;p&gt;修改一下工程。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - include
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - base.hpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - base
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - base.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - sandbox
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - main.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编写对应的 xmake.lua。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;demo/xmake.lua&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.debug&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.release&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_includedirs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;include&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;includes(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/base&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/sandbox&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;demo/src/base/xmake.lua&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;base&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;static&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;demo/src/sandbox/xmake.lua&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_packages(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sandbox&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们使用了一个新接口&lt;code&gt;includes&lt;/code&gt;，这个接口可以添加 xmake 的 lua 脚本，也可以添加 xmake 的子配置文件（文件名必须为&lt;code&gt;xmake.lua&lt;/code&gt;）。同时我们写了两个 xmake.lua，这样就可以模块化描述工程。因为&lt;code&gt;add_files&lt;/code&gt;是基于配置文件的&lt;strong&gt;位置&lt;/strong&gt;来转换文件路径，所以直接用&lt;code&gt;*.cpp&lt;/code&gt;匹配当前 xmake.lua 目录内的文件。&lt;/p&gt;
&lt;p&gt;在 base.cpp 编码的时候，你会发现又引用不了 fmt 头文件。这是因为&lt;code&gt;add_packages(&amp;quot;fmt&amp;quot;)&lt;/code&gt;只配置了&lt;code&gt;demo/src/sandbox/xmake.lua&lt;/code&gt;内的 target，也就是说，只是个&lt;strong&gt;局部配置&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但 base 和 sandbox 依然享受到了&lt;code&gt;add_rules(&amp;quot;mode.debug&amp;quot;, &amp;quot;mode.release&amp;quot;)&lt;/code&gt;和&lt;code&gt;add_includedirs(&amp;quot;include&amp;quot;)&lt;/code&gt;的配置，这是因为两个&lt;strong&gt;子配置文件&lt;/strong&gt;继承了&lt;strong&gt;根配置文件&lt;/strong&gt;的配置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于作用域的限定，子配置文件只能继承了根配置文件中全局作用域里的配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这类似于一颗多叉树，根节点的配置可以传播给叶节点，但叶节点的配置只能自己用或者继续向下传播，无法向上传播。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      /           \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;base/xmake.lua  sandbox/xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;目标依赖&#34;&gt;目标依赖&lt;/h3&gt;
&lt;p&gt;保持工程目录，修改 xmake.lua。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;demo/xmake.lua&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.debug&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.release&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;includes(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/base&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/sandbox&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;demo/src/base/xmake.lua&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;base&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;static&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_includedirs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;include&amp;#34;&lt;/span&gt;, {public &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;demo/src/sandbox/xmake.lua&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sandbox&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_deps(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;base&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们使用&lt;code&gt;add_deps&lt;/code&gt;显示指定依赖的 target，这样在构建工程会先构建 base 然后构建 sandbox。&lt;/p&gt;
&lt;p&gt;注意，不同 target 内部的 c/c++ 文件还是并行编译的，即使他们有依赖关系。因为 c/c++ 编译流程为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;预处理 -&amp;gt; 中间对象 -&amp;gt; 链接
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以 target 只有在链接的时候才会有依赖关系（如果有特殊情况，target 不能参与并行编译，为该 target 设置&lt;code&gt;set_policy(&amp;quot;build.across_targets_in_parallel&amp;quot;, false)&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;target 设置的编译链接相关的 api，还会有一个属性（private/interface/public）。&lt;/p&gt;
&lt;p&gt;api &lt;strong&gt;默认&lt;/strong&gt; private 属性，也就是说设置的配置仅供&lt;strong&gt;自己&lt;/strong&gt;使用。interface 反过来，只能给下游&lt;strong&gt;依赖&lt;/strong&gt;了自己的 target 使用。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;public == private + interface&lt;/code&gt;，自己和下游依赖&lt;strong&gt;都能用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因为 base 的&lt;code&gt;add_includedirs&lt;/code&gt;设置了&lt;code&gt;public = true&lt;/code&gt;，所以 base 和 sandbox 内的 cpp 文件，都可以引用来自 base 的头文件 base.hpp。&lt;/p&gt;
&lt;h3 id=&#34;脚本域&#34;&gt;脚本域&lt;/h3&gt;
&lt;p&gt;上面讲了那么多，基本上可以应付一些小型项目了。如果有更复杂的需求，就需要到&lt;strong&gt;脚本域&lt;/strong&gt;里干活（也就是说，平时都是在&lt;strong&gt;描述域&lt;/strong&gt;干活）。&lt;/p&gt;
&lt;p&gt;因为 xmake 的特性，描述域的代码需要被扫描多次，而脚本域的代码只会被执行一次。执行&lt;code&gt;xmake f -c&lt;/code&gt;，可以看见 world 只被打印一次。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;print 是 xmake 最&lt;del&gt;强大&lt;/del&gt;的调试手段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在描述域，我们使用 xmake api 添加了各种配置，但有一些 api 只能在脚本域运行，比如在脚本域获取描述域中（任何 add/set api）设置的配置和执行 &lt;code&gt;ls&lt;/code&gt; 命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_cxflags(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-O3&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_defines(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Win32&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(target:get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cxflags&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(target:get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;defines&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.vrun(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果在描述域使用 &lt;code&gt;os.vrun&lt;/code&gt; 会直接报错，只有少部分接口（例如 &lt;code&gt;print&lt;/code&gt;）才能在描述域和全局作用域使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;on_load&lt;/code&gt;只是编写脚本域代码的其中一处，我们还可以在下面每一步编写对应脚本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on_load -&amp;gt; after_load -&amp;gt; on_config -&amp;gt; before_build -&amp;gt; on_build -&amp;gt; after_build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;on_config 在&lt;code&gt;xmake config&lt;/code&gt;执行后，&lt;code&gt;before_build&lt;/code&gt;执行前的时候运行。&lt;/li&gt;
&lt;li&gt;如果是 c/c++ 程序，还可以在&lt;code&gt;[before|on|after]_link&lt;/code&gt;编写脚本。&lt;/li&gt;
&lt;li&gt;自定义&lt;code&gt;on_[build|link]&lt;/code&gt;会覆盖 xmake 内置的脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同构建阶段的脚本基本上可以满足各种定制化需求。&lt;/p&gt;
&lt;h3 id=&#34;规则&#34;&gt;规则&lt;/h3&gt;
&lt;p&gt;规则是 xmake 最强大的工具之一，你可以做到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给不同 target 应用不同的构建参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和&lt;code&gt;add_rules(&amp;quot;mode.debug&amp;quot;, &amp;quot;mode.release&amp;quot;)&lt;/code&gt;一样定制编译参数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rule(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; target:name() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            target:add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;packages&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; is_test &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; target:extraconf(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_test &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            target:add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cxflags&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-fsanitize=address&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            target:add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ldflags&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-fsanitize=address&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;, {test &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以通过判断 target 名字是否添加 fmt 包，也可以直接传入配置来判断是该 target 是否需要启用 asan，非常灵活。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建非 c/c++ 编译产物，比如使用 typst 生成 pdf，只需要下面几十行代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工程目录。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - resume-zh.typ
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;xmake.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rule(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;typst&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_extensions(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.typ&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 设置输出文件目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;targetdir&amp;#34;&lt;/span&gt;, path.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pdf&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_build_file(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target, sourcefile, opt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 导入模块&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;lib.detect.find_tool&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;core.project.depend&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utils.progress&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 创建输出文件目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.mkdir(target:targetdir())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 找到编译器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; typst &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; assert(find_tool(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;typst&amp;#34;&lt;/span&gt;, {version &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;}), &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;typst not found&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 拼接输出文件路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; targetfile &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; path.join(target:targetdir(), path.basename(sourcefile) &lt;span style=&#34;color:#ff79c6&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.pdf&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 一个封装好的函数，当源文件修改就会重新构建&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        depend.on_changed(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            os.vrunv(typst.program, {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;compile&amp;#34;&lt;/span&gt;, sourcefile, targetfile})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            progress.show(opt.progress, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;${color.build.object}compiling %s&amp;#34;&lt;/span&gt;, sourcefile)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;, {files &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sourcefile})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;resume&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;typst&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/resume-zh.typ&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和平常一样执行&lt;code&gt;xmake&lt;/code&gt;，就可以得到我们的 pdf 文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[ 33%]: compiling src/resume-zh.typ
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[100%]: build ok, spent 0.281s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果没找到编译器，assert 会失败，需要参考&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/manual/extension_modules?id=detectfind_tool&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文档&lt;/a&gt;进一步学习&lt;code&gt;find_tool&lt;/code&gt;的用法。&lt;/p&gt;
&lt;h3 id=&#34;调试&#34;&gt;调试&lt;/h3&gt;
&lt;p&gt;获取 xmake 和 xmake-repo 最新版。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake update -s dev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xrepo update-repo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;清理全局/工程缓存。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake g -c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake f -c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面是最基础的调试手段，下面介绍一些需要人工辅助的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt;大法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt;无论在配置文件哪里都可以使用，&lt;code&gt;cprint&lt;/code&gt;还可以输出有颜色的 log。除此之外还可以使用&lt;code&gt;assert&lt;/code&gt;和&lt;code&gt;raise&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出调用各种工具操作，编译的详细参数，如果出错还会打印 xmake 的栈回溯。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake -vD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;如果要给 xmake 提 issue 报 bug，请务必使用该命令生成 log 提交上去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可以显示指定 target 配置信息，可以看到各种配置来源于哪个配置文件和具体的行数。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake show -t &amp;lt;target&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;检查工程配置和代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ xmake check
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 调用 clang-tidy 检测代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ xmake check clang.tidy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为 xmake 基本上都是依靠字符串传递各种配置，如果打错参数名（typo）就会导致&lt;code&gt;xmake config&lt;/code&gt;失败。这个 xmake 插件能检测到 typo （基于 Levenshtein Distance 算法），也能检测各种通过&lt;code&gt;add_xxx&lt;/code&gt;接口添加的文件/目录，是否匹配文件成功。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;xmake 还有很多有用的插件，多多尝试使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;可能的最佳实践&#34;&gt;可能的最佳实践&lt;/h2&gt;
&lt;p&gt;一个完整的项目，目录结构可能长这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- xmake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - rule
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - module.lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - option.lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - package.lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - test1.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - test2.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- xmake.lua
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对应的部分配置：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xmake.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_project(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_version(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0.0.1&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_xmakever(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2.7.9&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_warnings(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_languages(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c++20&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_allowedplats(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;macosx&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;includes(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;xmake/xmake.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;includes(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;option.lua&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;includes(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;package.lua&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;includes(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rule/module.lua&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;xmake/option.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;option(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, {default &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;, showmenu &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, description &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Enable test&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;option(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;feature&amp;#34;&lt;/span&gt;, {default &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;, showmenu &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, description &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Enable feature&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以把构建选项集中在一起（选项在&lt;code&gt;xmake config&lt;/code&gt;的时候传递&lt;code&gt;--test=[y/n]&lt;/code&gt;启用或关闭）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xmake/package.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; has_config(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gtest&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;gtest 库只有在 test 选项启用后才会安装。&lt;/p&gt;
&lt;h3 id=&#34;单元测试&#34;&gt;单元测试&lt;/h3&gt;
&lt;p&gt;xmake 官方不支持单元测试，&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/issues/3381&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;相关讨论&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可以参考下面这个单元测试模板。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xmake/rule/module.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rule(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module.test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 没有开启 test 选项，就关闭 target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; has_config(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 运行目录修改为根目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rundir&amp;#34;&lt;/span&gt;, os.projectdir())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 添加测试组&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 选择你想要的单元测试库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;packages&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gtest&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;test/xmake.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module.test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- 假设 test 目录下每个 cpp 文件都有自己的 main 函数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _, file &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; ipairs(os.files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*.cpp&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; path.basename(file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;..&lt;/span&gt; name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_files(file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    target_end()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先写了一个名叫&lt;code&gt;module.test&lt;/code&gt;的 rule，这是给测试 target 添加编译参数。然后使用&lt;code&gt;os.files&lt;/code&gt;收集文件，遍历目录获取指定文件并生成 target。&lt;/p&gt;
&lt;p&gt;然后我们执行命令开启 test 选项并指定 test 组编译运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake f -m debug --test&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake build -g &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake run -g &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想一行&lt;code&gt;xmake test&lt;/code&gt;命令搞定，可以使用&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/manual/plugin_task&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;task&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;task(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_run(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.exec(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake f -m debug --test=y&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.exec(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake build -g test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.exec(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake run -g test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_menu{}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;库&#34;&gt;库&lt;/h3&gt;
&lt;p&gt;假如你要写一个库，给别人调用或者自己使用。&lt;/p&gt;
&lt;p&gt;因为 xmake 没有类似 c++ namespace 的特性，可能 target/rule/option&amp;hellip; 与自己的定义的名字发生冲突。而 xmake 有自己的包管理，只要贡献到 xmake-repo 别人就能使用，所以不推荐使用&lt;code&gt;includes&lt;/code&gt;集成库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;include&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要安装的头文件，使用&lt;code&gt;add_headerfiles&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- 保留头文件目录结构&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_headerfiles(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;include/(**.h)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- 丢弃文件目录结构，所有头文件都放在 include 目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_headerfiles(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;include/**.h&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;lib&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 &lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/guide/project_examples?id=%e5%90%88%e5%b9%b6%e9%9d%99%e6%80%81%e5%ba%93&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;build.merge_archive&lt;/a&gt;，对某个 target 使用&lt;code&gt;set_policy(&amp;quot;build.merge_archive&amp;quot;, true)&lt;/code&gt;，可以自动合并依赖的所有静态库。这样在发布的时候可以只安装一个静态库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Windows 上编译动态库，但又不想自己导出符号，可以使用&lt;code&gt;add_rules(&amp;quot;utils.symbols.export_all&amp;quot;)&lt;/code&gt;自动导出所有符号（如果是 c++ 库还要给该规则传递参数&lt;code&gt;{export_classes = true}&lt;/code&gt;）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果需要安装其他文件，比如文档，使用&lt;code&gt;add_installfiles(&amp;quot;doc/*.md&amp;quot;, {prefixdir = &amp;quot;share/doc&amp;quot;})&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;导出该库给其他构建系统交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utils.install.cmake_importfiles&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utils.install.pkgconfig_importfiles&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;想把这个库提交到 xmake-repo 上，还需要写对应的包描述脚本，这里只能参考&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/package/remote_package?id=%e6%b7%bb%e5%8a%a0%e5%8c%85%e5%88%b0%e4%bb%93%e5%ba%93&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文档&lt;/a&gt;和 xmake-repo 上其他包。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件&#34;&gt;软件&lt;/h3&gt;
&lt;p&gt;如果要发布一个软件，基本上都要重写&lt;code&gt;on_install&lt;/code&gt;脚本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为不需要安装头文件，配置&lt;code&gt;add_headerfiles(&amp;quot;src/xxx.h&amp;quot;, {install = false})&lt;/code&gt;。因为&lt;code&gt;add_headerfiles&lt;/code&gt;这个接口不止用来安装头文件，还可以用作 ide 的工程目录显示（也就是说，如果不使用&lt;code&gt;add_headerfiles&lt;/code&gt;，ide 工程目录只会显示源文件）。&lt;/li&gt;
&lt;li&gt;xmake 内部封装了常用的&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/manual/extension_modules?id=utilsarchive&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;压缩工具&lt;/a&gt;，在&lt;code&gt;on_install&lt;/code&gt;最后一步可以把所有文件打包成压缩包。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想用 upx 压缩也很简单。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rule(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module.program&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    after_build(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 判断是否使用 upx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; enabled &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; target:extraconf(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module.program&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;upx&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; enabled &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; target:kind() &lt;span style=&#34;color:#ff79c6&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; upx &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; assert(import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;lib.detect.find_tool&amp;#34;&lt;/span&gt;)(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;upx&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;upx not found!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 生成在 build 目录里&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; path.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;, path.filename(target:targetfile()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.tryrm(file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.vrunv(upx.program, {target:targetfile(), &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;, file})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module.program&amp;#34;&lt;/span&gt;, {upx &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以进一步优化这个 rule。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rule(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module.program&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    after_build(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; enabled &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; target:extraconf(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module.program&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;upx&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; enabled) &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; is_mode(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;release&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;core.project.depend&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;lib.detect.find_tool&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; targetfile &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; target:targetfile()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        depend.on_changed(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; path.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;, path.filename(targetfile))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; upx &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; assert(find_tool(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;upx&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;upx not found!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            os.tryrm(file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            os.vrunv(upx.program, {targetfile, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;, file})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;, {files &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; targetfile})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module.program&amp;#34;&lt;/span&gt;, {upx &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 target 的描述域中，&lt;code&gt;set_kind&lt;/code&gt;也不需要写了。通过 &lt;code&gt;depend.on_changed&lt;/code&gt; 接口，判断依赖文件的修改时间，避免每次重新构建。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Xmake 常见问题解答</title>
        <link>https://star-hengxing.github.io/p/xmake-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/</link>
        <pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/xmake-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/</guid>
        <description>&lt;p&gt;&lt;strong&gt;如果在本文没找到解答，可以去 &lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github&lt;/a&gt; 提 issue 和讨论区搜索。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果是官方包管理的问题，或者想请求加入一些包，去 &lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake-repo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xmake-repo&lt;/a&gt; 提 issue。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提 issue 请附带 log，&lt;code&gt;xmake -vD&lt;/code&gt;命令可以输出详细的 log 信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;基础&#34;&gt;基础&lt;/h2&gt;
&lt;h3 id=&#34;避免外网访问&#34;&gt;避免外网访问&lt;/h3&gt;
&lt;p&gt;xmake 很多操作需要访问 github（拉取 xmake-repo/build-artifact），而在公司内网开发是不需要这些操作的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake g --network&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;private
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/issues/947&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/xmake-io/xmake/issues/947&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;windows-上-qt-项目控制台没有输出&#34;&gt;Windows 上 Qt 项目控制台没有输出&lt;/h3&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_ldflags(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/subsystem:console&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;xmake 的 qt rule 里会检测 ldflags 里有没有&lt;code&gt;/subsystem&lt;/code&gt;，如果没有就默认&lt;code&gt;/subsystem:windows&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;给单独源文件添加参数&#34;&gt;给单独源文件添加参数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test/*.c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test2/test2.c&amp;#34;&lt;/span&gt;, {defines &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;TEST2&amp;#34;&lt;/span&gt;, languages &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c99&amp;#34;&lt;/span&gt;, includedirs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, cflags &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-O0&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- 强制禁用 cxflags,cflags 等编译选项的自动检测&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/*.c&amp;#34;&lt;/span&gt;, {force &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {cxflags &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-DTEST&amp;#34;&lt;/span&gt;, mflags &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-framework xxx&amp;#34;&lt;/span&gt;}})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;给指定文件添加-config&#34;&gt;给指定文件添加 config&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test/*.cpp&amp;#34;&lt;/span&gt;, {foo &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_config(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- configs = {foo = 1}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; configs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; target:fileconfig(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/main.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;找不到-vs-工具链&#34;&gt;找不到 vs 工具链&lt;/h3&gt;
&lt;p&gt;在 Visual Studio Installer 修改了配置后，清除全局缓存。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake g -c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake f -c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示找不到 Microsoft Visual Studio (x64) version
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/issues/770&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/xmake-io/xmake/issues/770&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/discussions/3785&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/xmake-io/xmake/discussions/3785&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/issues/2927&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xmake can not find visual studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/issues/3229&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;XMake无法自动发现MSVC编译工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;指定-vs-版本&#34;&gt;指定 vs 版本&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake f --vs&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2017&lt;/span&gt; --vs_toolset&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;14.0 --vs_sdkver&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;10.0.15063.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;idevscodevs不显示头文件&#34;&gt;IDE(vscode/vs)不显示头文件&lt;/h3&gt;
&lt;p&gt;给 target 加上&lt;code&gt;add_headerfiles(&amp;quot;**.h&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;终端不支持色彩输出&#34;&gt;终端不支持色彩输出&lt;/h3&gt;
&lt;p&gt;切换&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/theme/builtin_themes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;主题&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake g --theme&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;plain
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;如何在脚本域添加文件&#34;&gt;如何在脚本域添加文件&lt;/h3&gt;
&lt;p&gt;只能在&lt;code&gt;on_load&lt;/code&gt;添加，并且需要确保路径正确。&lt;/p&gt;
&lt;p&gt;因为描述域的&lt;code&gt;add_files()&lt;/code&gt;和脚本域的&lt;code&gt;target:add(&amp;quot;files&amp;quot;)&lt;/code&gt;有一些差异，并不会做路径转换。&lt;/p&gt;
&lt;p&gt;后者接口可能会在任何地方使用，所以路径只能用&lt;code&gt;os.projectdir&lt;/code&gt;或者&lt;code&gt;os.scriptdir&lt;/code&gt;进行拼接路径。&lt;/p&gt;
&lt;p&gt;此外，需要确保该 target 已经应用了一个编译规则，否则不会根据后缀名去添加文件（可能会出现&lt;code&gt;error: unknown source file: xxx.cpp&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;比如你在脚本域添加 .cpp 文件，那么首先在描述域添加&lt;code&gt;add_rules(&amp;quot;c++&amp;quot;)&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;增量配置&#34;&gt;增量配置&lt;/h3&gt;
&lt;p&gt;假如我们做以下操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake f -m debug --test&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake f --test&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;n
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会发现当前&lt;code&gt;mode&lt;/code&gt;又切换了为默认配置的&lt;code&gt;release&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;xmake 暂时没有支持增量配置，&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/issues/2401&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;有过相关讨论。&lt;/p&gt;
&lt;p&gt;但我们也有解决的方法，使用&lt;code&gt;SirLynix&lt;/code&gt;写的插件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake plugin --install https://github.com/SirLynix/xmake-plugins
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用&lt;code&gt;xmake config-update&lt;/code&gt;或者&lt;code&gt;xmake cu&lt;/code&gt;代替原来的&lt;code&gt;xmake config&lt;/code&gt;或者&lt;code&gt;xmake f&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;在不同脚本域之间传递数据&#34;&gt;在不同脚本域之间传递数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;memcache&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;core.cache.memcache&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        memcache.set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cachename&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;core.cache.memcache&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; memcache.get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cachename&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;target:data()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:data_set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;core.project.project&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; foo &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; project.targets()[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; foo:data(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;单个脚本文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;load_module&amp;#34;&lt;/span&gt;).load_foo(target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;load_module&amp;#34;&lt;/span&gt;).load_bar(target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;load_module.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;load_foo&lt;/span&gt;(target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _g.key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;load_bar&lt;/span&gt;(target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; _g.key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/orgs/xmake-io/discussions/3926&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/orgs/xmake-io/discussions/3926&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自动化&#34;&gt;自动化&lt;/h2&gt;
&lt;h3 id=&#34;如何一键编译运行&#34;&gt;如何一键编译运行&lt;/h3&gt;
&lt;p&gt;在 target 下加入以下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;before_run(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os.execv(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake build &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;..&lt;/span&gt; target:name())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- xmake run target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;vs-工程&#34;&gt;vs 工程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自动更新 sln。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;plugin.vsxmake.autoupdate&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;add_filegroups&lt;/code&gt;可以打平嵌套过深的目录树，可读性更高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单元测试&#34;&gt;单元测试&lt;/h3&gt;
&lt;p&gt;xmake 官方不支持单元测试，&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/issues/3381&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;有过相关讨论。&lt;/p&gt;
&lt;p&gt;但自己写一个也很简单，下面是一个参考：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rule(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module.test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; has_config(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;policy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;build.warning&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rundir&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;$(projectdir)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- 选择你想要的单元测试库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;packages&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gtest&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rule_end()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module.test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- 假设 test 目录下每个 cpp 文件都有自己的 main 函数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _, file &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; ipairs(os.files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test/*.cpp&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; path.basename(file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;..&lt;/span&gt; name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_files(file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    target_end()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们使用下面命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake f -m debug --test&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake build -g &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake run -g &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想一行&lt;code&gt;xmake test&lt;/code&gt;命令搞定，使用&lt;code&gt;task&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;task(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_run(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.exec(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake f -m debug --test=y&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.exec(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake build -g test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.exec(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake run -g test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_menu{}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;自定义检测行为&#34;&gt;自定义检测行为&lt;/h3&gt;
&lt;p&gt;xmake 在检测各种工具、配置等等信息时都会有缓存，我们可以自定义一个检测行为并对其缓存。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on_config(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;core.cache.detectcache&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; has_deprecated_key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;custom.has_deprecated&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; has_deprecated &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; detectcache:get(has_deprecated_key)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; has_deprecated &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        has_deprecated &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; target:check_csnippets({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            has_deprecated &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;[[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            #define TEST __declspec(deprecated)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            int somefunc() { return 0; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            int main() { return somefunc();}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        ]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        detectcache:set(has_deprecated_key, has_deprecated)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        detectcache:save()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;-- has_deprecated is now cached&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;包管理&#34;&gt;包管理&lt;/h2&gt;
&lt;h3 id=&#34;依赖同一个包多个版本&#34;&gt;依赖同一个包多个版本&lt;/h3&gt;
&lt;p&gt;有依赖包 A 和 B，A 包依赖 1.0.0 版本的 C 包，B 包依赖 1.1.0 版本的 C 包，如果继续编译的话，可能会链接失败，解决方法就是打平依赖，只依赖 C 包同一个版本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requireconfs&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;B.C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; true&lt;span style=&#34;color:#ff79c6&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里把 C 包统一到 1.0.0 版本。&lt;/p&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/issues/3868&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/xmake-io/xmake/issues/3868&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/orgs/xmake-io/discussions/2220&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/orgs/xmake-io/discussions/2220&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vcpkg-包不会自动处理依赖&#34;&gt;vcpkg 包不会自动处理依赖&lt;/h3&gt;
&lt;p&gt;暂时不支持，最好去用官方包&lt;/p&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/issues/3634&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/xmake-io/xmake/issues/3634&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何调试包源码&#34;&gt;如何调试包源码&lt;/h3&gt;
&lt;p&gt;xmake 早期是保留源码的，但每次安装都保留源码和编译产物，容易把磁盘用满，所以现在优化了，不再保留。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# -d 指定源码覆盖安装，本地源码调试包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xrepo install -m debug -d package_sourcedir xxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;有些远程包为什么没有拉预编译版本&#34;&gt;有些远程包为什么没有拉预编译版本&lt;/h3&gt;
&lt;p&gt;众所周知 c++ 编译器编译出的二进制有 abi 问题，同一个编译器&lt;strong&gt;不同版本&lt;/strong&gt;都可能不兼容，所以当预编译库的编译器版本（github ci 编译）和本地编译器版本&lt;strong&gt;不一致&lt;/strong&gt;的时候，会拉取源码进行编译。&lt;/p&gt;
&lt;p&gt;有些库很大，编译需要很久，可以考虑下面方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;比较推荐通过&lt;code&gt;set_base(&amp;quot;package&amp;quot;)&lt;/code&gt;继承包，然后覆盖包的一些设置，跳过 xmake 的检查直接&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/package/remote_package?id=%e5%ae%89%e8%a3%85%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%8c%85&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;安装二进制包&lt;/a&gt;。这里可能需要对 xmake 有一定的基础，不过完成后都是自动化，这是值得的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手动下载预编译包到本地包仓库&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设预编译包目录和&lt;code&gt;xmake.lua&lt;/code&gt;同一个目录，使用&lt;code&gt;on_fetch&lt;/code&gt;进行配置。&lt;/p&gt;
&lt;p&gt;这里拿 &lt;a class=&#34;link&#34; href=&#34;https://github.com/glfw/glfw/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;glfw&lt;/a&gt; 作为参考。&lt;/p&gt;
&lt;p&gt;我这里下载并解压了&lt;code&gt;glfw-3.3.8.bin.WIN64.zip&lt;/code&gt;，然后在&lt;code&gt;xmake.lua&lt;/code&gt;这样写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- 演示操作，不一定正确&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;glfw&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- set package dir&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        package:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;installdir&amp;#34;&lt;/span&gt;, path.join(os.scriptdir(), &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;glfw-3.3.8.bin.WIN64&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_fetch(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (package)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;-- add dll&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        package:addenv(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;, package:installdir(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;lib-vc2022&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result.syslinks &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;  {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;user32&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shell32&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gdi32&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.links &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;glfw3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;glfw3_mt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;glfw3dll&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.includedirs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; package:installdir(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;include&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result.linkdirs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; package:installdir(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;lib-vc2022&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package_end()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_runtimes(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MD&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;glfw&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_packages(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;glfw&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;h3 id=&#34;xmake-源码怎么看&#34;&gt;xmake 源码怎么看&lt;/h3&gt;
&lt;p&gt;有一篇老文章可以看看 -&amp;gt; &lt;a class=&#34;link&#34; href=&#34;https://tboox.org/cn/2017/09/28/xmake-sourcecode-arch/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xmake 源码架构剖析&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;定制-api&#34;&gt;定制 api&lt;/h3&gt;
&lt;p&gt;参考一下这个 pr 是怎么写的：&lt;a class=&#34;link&#34; href=&#34;https://github.com/xmake-io/xmake/pull/4019&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Add set_encodings api to set source/target encoding&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43; 胡言乱语X2</title>
        <link>https://star-hengxing.github.io/p/c-%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%ADx2/</link>
        <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/c-%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%ADx2/</guid>
        <description>&lt;p&gt;子标题：理解 std::move 和所有权。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;关于 std::move 其实也有很多文章了，不过为了给群友解释，再造一次轮子。&lt;/p&gt;
&lt;h2 id=&#34;stdmove&#34;&gt;std::move&lt;/h2&gt;
&lt;p&gt;我们打开 std::move 的实现，发现里面是一个强制类型转换（随便找的代码）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typename&lt;/span&gt; remove_reference&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; move(T&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; arg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typename&lt;/span&gt; remove_reference&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&amp;gt;&lt;/span&gt;(arg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Object A;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Object B &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;move(A);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这右值有啥用啊？假设 Object 类有以下构造函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 函数1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Object(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; Object&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; object);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 函数2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Object(Object&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; object);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果没有&lt;code&gt;std::move(A)&lt;/code&gt;这一步，那么B将会调用函数1进行构造，反之调用函数2。&lt;/p&gt;
&lt;p&gt;但分开两个构造函数是干什么呢，这里就牵涉到一个资源分配和所有权问题。&lt;/p&gt;
&lt;h2 id=&#34;所有权&#34;&gt;所有权&lt;/h2&gt;
&lt;p&gt;假如你是A，你从宠物商店买了一只仓鼠回来（仓鼠挺可爱的），那你就成为了这只仓鼠的主人。&lt;/p&gt;
&lt;p&gt;B是你的好朋友，他经常到你家玩。他觉得你的仓鼠很可爱，于是他也想买一只，但是他没有足够的钱。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分支路线1：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可是突然有一天，你不想养这只仓鼠了，就想找个人帮你继续养下去。你知道B也想养一只属于自己的仓鼠，但没有钱去买。于是你找来了B，将仓鼠送给了他。&lt;/p&gt;
&lt;p&gt;那么B从这天起，就成为了仓鼠的第二任主人了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分支路线2：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有一天B打工赚了许多钱，于是他去问你这只仓鼠是什么品种，然后自己到宠物商店买了一只差不多一样的。&lt;/p&gt;
&lt;p&gt;现在又有一只小仓鼠找到了新家了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;回到主题，在上面，抽象来讲，买了一只仓鼠，其实就是分配了一个资源，你就拥有了他的使用权（所有权）。&lt;/p&gt;
&lt;p&gt;分支路线1中，A把仓鼠送给了B，这就是转移了仓鼠的所有权，主人从A变成了B，对应&lt;code&gt;Object(Object&amp;amp;&amp;amp; object)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;分支路线2中，B也买了一只仓鼠，这样两只仓鼠，都有了各自的主人，对应&lt;code&gt;Object(const Object&amp;amp; object)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;要知道买一只新仓鼠是要花钱的，所以在某些场景用 std::move 来节省这个&lt;strong&gt;资源&lt;/strong&gt;的开销。&lt;/p&gt;
&lt;p&gt;但仓鼠毕竟是别人养过的，想要一只&lt;strong&gt;独一无二属于&lt;/strong&gt;自己的小仓鼠，那就买一只新的吧，所以就需要申请一份&lt;strong&gt;新的资源&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;理解所有权后，就像学数据结构学会了链表。学习新的知识，第一步总是最难的。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用 Xmake 生成静态和动态库</title>
        <link>https://star-hengxing.github.io/p/%E4%BD%BF%E7%94%A8-xmake-%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/</link>
        <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E4%BD%BF%E7%94%A8-xmake-%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当前环境在 Windows，默认了解 C/C++ 编译流程。&lt;/li&gt;
&lt;li&gt;不一定是最佳实践。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;静态库&#34;&gt;静态库&lt;/h2&gt;
&lt;p&gt;target 下直接考虑用&lt;code&gt;set_kind(&amp;quot;static&amp;quot;)&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;有一个可以注意的地方，可以使用&lt;code&gt;set_policy(&amp;quot;build.merge_archive&amp;quot;, true)&lt;/code&gt;来合并所有静态库。（大概是用在分发二进制的时候？）&lt;/p&gt;
&lt;h2 id=&#34;动态库&#34;&gt;动态库&lt;/h2&gt;
&lt;p&gt;考虑到 windows dll 要在函数声明&lt;code&gt;__declspec(dllexport)&lt;/code&gt;导出接口（也可以用&lt;code&gt;.def&lt;/code&gt;文件）。&lt;/p&gt;
&lt;p&gt;手动给每个符号声明很麻烦，需要 build system 来自动化。&lt;/p&gt;
&lt;p&gt;xmake 对此做了支持，只需要在 target 下添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- C&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utils.symbols.export_all&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- C++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utils.symbols.export_all&amp;#34;&lt;/span&gt;, {export_classes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就会生成正确 dll 文件了。&lt;/p&gt;
&lt;p&gt;如果想要自定义导出符号，使用&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/manual/custom_rule?id=utilssymbolsexport_list&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;utils.symbols.export_list&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;直接配置&#34;&gt;直接配置&lt;/h2&gt;
&lt;p&gt;假设&lt;code&gt;test&lt;/code&gt;目录下是一个库，把上面静态库和动态库的用法结合起来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_includedirs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;include&amp;#34;&lt;/span&gt;, {public &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;$(kind)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/add.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shared&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utils.symbols.export_all&amp;#34;&lt;/span&gt;, {export_classes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;$(kind)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/sub.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shared&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utils.symbols.export_all&amp;#34;&lt;/span&gt;, {export_classes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;$(kind)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/test.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_deps(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shared&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utils.symbols.export_all&amp;#34;&lt;/span&gt;, {export_classes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;elseif&lt;/span&gt; is_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;static&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        set_policy(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;build.merge_archive&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用不同类型的库只要&lt;code&gt;xmake f -k shared/static&lt;/code&gt;就行了。&lt;/p&gt;
&lt;h2 id=&#34;使用规则&#34;&gt;使用规则&lt;/h2&gt;
&lt;p&gt;上面只是临时用法，实际在工程中，我推荐使用规则。下面代码和上面效果是一样的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rule(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; (target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_mode(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debug&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;releasedbg&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shared&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                import(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;core.project.rule&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; rule &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; rule.rule(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utils.symbols.export_all&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                target:rule_add(rule)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                target:extraconf_set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utils.symbols.export_all&amp;#34;&lt;/span&gt;, {export_classes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;elseif&lt;/span&gt; is_mode(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;release&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;static&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            assert(&lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Unknown build kind&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rule_end()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;开发时(debug mode)，全编译为动态库，加速链接。&lt;/li&gt;
&lt;li&gt;发布时(release mode)，全编译为静态库，生成单个可执行程序文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;$(kind)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/test.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_deps(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>使用 Xmake 作为 CS149 作业的 bulild system</title>
        <link>https://star-hengxing.github.io/p/%E4%BD%BF%E7%94%A8-xmake-%E4%BD%9C%E4%B8%BA-cs149-%E4%BD%9C%E4%B8%9A%E7%9A%84-bulild-system/</link>
        <pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E4%BD%BF%E7%94%A8-xmake-%E4%BD%9C%E4%B8%BA-cs149-%E4%BD%9C%E4%B8%9A%E7%9A%84-bulild-system/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;CS149 是一个教&lt;strong&gt;并行编程&lt;/strong&gt;的课程，课程作业使用了 makefile 作为 build system。&lt;/p&gt;
&lt;p&gt;本文通过改造 build system 来讲述一些&lt;code&gt;xmake&lt;/code&gt;的使用方法。&lt;/p&gt;
&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;
&lt;p&gt;这个课程主要有四个作业，那么是一个多&lt;code&gt;target&lt;/code&gt;工程，考虑用&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/guide/syntax_description?id=%e5%a4%9a%e7%ba%a7%e9%85%8d%e7%bd%ae&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;多级配置&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;作业里用到了很多工具，&lt;code&gt;xmake&lt;/code&gt;都支持这些工具链。不过有些作业不跨平台（只能在 Linux 下运行），所以尽可能地将作业移植到 windows 上。&lt;/p&gt;
&lt;h2 id=&#34;改造&#34;&gt;改造&lt;/h2&gt;
&lt;p&gt;完整配置在&lt;a class=&#34;link&#34; href=&#34;https://github.com/star-hengxing/cs149-xmake&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;上，这里选讲几个部分。&lt;/p&gt;
&lt;h3 id=&#34;根目录配置&#34;&gt;根目录配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最小&lt;code&gt;xmake&lt;/code&gt;版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_xmakever(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2.7.5&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;跨平台首选&lt;code&gt;clang&lt;/code&gt;作为 C++ 编译器，在 windows 下使用&lt;code&gt;clang-cl&lt;/code&gt;接受 msvc 风格的&lt;strong&gt;参数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在开发环境下，链接动态库可以减少二进制体积，加速链接。&lt;/li&gt;
&lt;li&gt;添加宏定义处理一些 windows 的屎。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;-- set_toolchains(&amp;#34;clang-cl&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_runtimes(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MD&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_defines(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;_CRT_SECURE_NO_WARNINGS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;NOMINMAX&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;-- set_toolchains(&amp;#34;clang&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;源码目录配置&#34;&gt;源码目录配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;考虑到 windows 没有&lt;code&gt;getopt.h&lt;/code&gt;，这里在 github 上随便找了一个库代替，并开放&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/manual/project_target?id=%e6%b7%bb%e5%8a%a0%e5%a4%b4%e6%96%87%e4%bb%b6%e6%90%9c%e7%b4%a2%e7%9b%ae%e5%bd%95&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;头文件权限&lt;/a&gt;给依赖此库的&lt;code&gt;target&lt;/code&gt;使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;getopt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;static&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_includedirs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;getopt-for-windows&amp;#34;&lt;/span&gt;, {public &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;getopt-for-windows/getopt.c&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    target_end()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;作业1&#34;&gt;作业1&lt;/h3&gt;
&lt;p&gt;作业有多个&lt;code&gt;target&lt;/code&gt;，其实可以考虑每个给每个&lt;code&gt;target&lt;/code&gt;单独一个配置，不过这里选择把多个&lt;code&gt;target&lt;/code&gt;都放在同一个&lt;code&gt;xmake.lua&lt;/code&gt;中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据原始 makefile 参数，处理一些跨平台配置。&lt;/li&gt;
&lt;li&gt;考虑到作业会生成 ppm 格式的图片，所以改变该&lt;code&gt;target&lt;/code&gt;的运行目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mandelbrot&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;prog1_mandelbrot_threads/*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_optimize(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fastest&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_deps(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;common&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_deps(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;getopt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;elseif&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_syslinks(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pthread&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_rundir(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;prog1_mandelbrot_threads&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target_end()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;这里用到了&lt;code&gt;ispc&lt;/code&gt;进行编译，使用&lt;code&gt;xmake&lt;/code&gt;的内置规则进行编译。&lt;/li&gt;
&lt;li&gt;编译 ispc 文件会生成一个对象文件和头文件，这里通过&lt;code&gt;header_extension&lt;/code&gt;配置控制生成头文件的后缀，然后就可以在代码中引用生成的头文件&lt;code&gt;xxx_ispc.h&lt;/code&gt;（xxx.ispc）。&lt;/li&gt;
&lt;li&gt;由于没有内置的 ispc api，这里使用&lt;code&gt;set_values&lt;/code&gt;传递编译参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqrt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utils.ispc&amp;#34;&lt;/span&gt;, {header_extension &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;_ispc.h&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;prog4_sqrt/*.ispc&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;prog4_sqrt/*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_cxxflags(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-march=native&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_values(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ispc.flags&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--target=avx2-i32x8&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--arch=x86-64&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_optimize(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fastest&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_deps(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;common&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_syslinks(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pthread&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target_end()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;作业2&#34;&gt;作业2&lt;/h3&gt;
&lt;p&gt;本作业两个&lt;code&gt;target&lt;/code&gt;的配置相同，可以用一个循环来生成。（常用于生成相同配置的单元测试）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _, part &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; ipairs({&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;part_a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;part_b&amp;#34;&lt;/span&gt;}) &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(part)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_includedirs(part)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_includedirs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;../common&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tests&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(part &lt;span style=&#34;color:#ff79c6&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tests/main.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_deps(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;getopt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;elseif&lt;/span&gt; is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add_syslinks(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pthread&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target_end()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;作业内置 test，但官方没有提供完成所有测试的脚本（其实直接改源码也可以），不过这里考虑用 xmake 的脚本域来做这件事。&lt;/li&gt;
&lt;li&gt;设置一个空目标类型，覆盖内置的&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/manual/project_target?id=%e6%b7%bb%e5%8a%a0%e5%a4%b4%e6%96%87%e4%bb%b6%e6%90%9c%e7%b4%a2%e7%9b%ae%e5%bd%95&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;on_run&lt;/a&gt;，然后使用 xmake 一些内置的 api 运行测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;part_a_test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;phony&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_deps(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;part_a&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_run(&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; test_names &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;simple_test_sync&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping_pong_equal&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ping_pong_unequal&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;super_light&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;super_super_light&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;recursive_fibonacci&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;math_operations_in_tight_for_loop&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;math_operations_in_tight_for_loop_fewer_tasks&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;math_operations_in_tight_for_loop_fan_in&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;math_operations_in_tight_for_loop_reduction_tree&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;spin_between_run_calls&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mandelbrot_chunked&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _, value &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; ipairs(test_names)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#6272a4&#34;&gt;-- cprint(&amp;#34;Testing &amp;#34; .. &amp;#34;${bright green}%s&amp;#34;, value)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#6272a4&#34;&gt;-- os.runv(name, {value})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            os.execv(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xmake&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;part_a&amp;#34;&lt;/span&gt;, value})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cprint(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;${bright red}Pass!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target_end()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;作业3&#34;&gt;作业3&lt;/h3&gt;
&lt;p&gt;xmake 会自动探测 cuda 的目录，如果不在默认的安装目录，设置一下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake f --cuda=&amp;lt;PATH&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;xmake 对&lt;code&gt;cuda&lt;/code&gt;支持还算完善，直接&lt;code&gt;add_files&lt;/code&gt;就能直接编译。&lt;/li&gt;
&lt;li&gt;cuda runtime 也有动态库，不过 xmake 默认链接静态库，这里需要手动添加链接动态库的名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_cugencodes(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;compute_35&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_links(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cudart&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;render&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;render/*.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;render/*.cu&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_packages(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;freeglut&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_rundir(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;render&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target_end()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;作业4&#34;&gt;作业4&lt;/h3&gt;
&lt;p&gt;该作业只能运行在 Linux 平台，因为官方只提供了 Linux 平台的二进制进行链接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里写了一个函数禁用&lt;code&gt;target&lt;/code&gt;，然后在&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/manual/project_target?id=targeton_load&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;on_load&lt;/a&gt;时禁用，可以使用其他写法禁用&lt;code&gt;target&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;官方提供了一个静态库，但静态库名字前缀不是&lt;code&gt;lib&lt;/code&gt;开头，链接器不接受，所以不能直接用&lt;code&gt;add_links&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;only_linux&lt;/span&gt;(target)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; target:is_plat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target:set(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pr&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pagerank/main.cpp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pagerank/page_rank.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_linkdirs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pagerank&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_ldflags(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-fopenmp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_ldflags(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-l:ref_pr.a&amp;#34;&lt;/span&gt;, {force &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_deps(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;assignment4_common&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(only_linux)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target_end()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;对象文件也可也直接&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/manual/project_target?id=targetadd_files&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;add_files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bfs&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bfs/main.cpp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bfs/bfs.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bfs/ref_bfs.o&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_ldflags(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-fopenmp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_deps(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;assignment4_common&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_load(only_linux)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target_end()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>用 vscode 写 UE 代码</title>
        <link>https://star-hengxing.github.io/p/%E7%94%A8-vscode-%E5%86%99-ue-%E4%BB%A3%E7%A0%81/</link>
        <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E7%94%A8-vscode-%E5%86%99-ue-%E4%BB%A3%E7%A0%81/</guid>
        <description>&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;p&gt;目前来说 Rider 还是最好的 UE IDE，本文只是提供多一种选项来写 UE 代码。&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vscode 插件 clangd&lt;/li&gt;
&lt;li&gt;clang&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows 推荐使用 scoop 下载 clang。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scoop install llvm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用 vscode 打开 UE 项目目录，新建&lt;code&gt;.vscode&lt;/code&gt;目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新建&lt;code&gt;.vscode/settings.json&lt;/code&gt;文件，写入下面内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;clangd.arguments&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--background-index&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--compile-commands-dir=.vscode&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// completion
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--header-insertion=never&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--completion-style=bundled&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--function-arg-placeholders=false&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// effective
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--pch-storage=memory&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-j=16&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// coding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--clang-tidy&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// misc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--log=error&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;在项目目录新建&lt;code&gt;.clang-format&lt;/code&gt;文件，谷歌一下 UE clang-format，随便找一个复制下来。这里用来格式化代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用脚本生成反射信息和&lt;code&gt;compile_commands.json&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;compile_commands.json&lt;/code&gt;成功生成后，打开 cpp 文件，clangd 就会自动运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;UE 的 Unreal Build Tool 可以生成&lt;code&gt;compile_commands.json&lt;/code&gt;，需要 clang 辅助。不过 UBT 写的比较奇葩，在命令行直接&lt;code&gt;clang -v&lt;/code&gt;有结果，但 UBT 还是找不到，在论坛看了一遍 Linux/Windows 都是这样。&lt;/p&gt;
&lt;p&gt;但 Windows 还是能找到 clang 的，不过需要把 LLVM 工具链放在这里。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C:/Program Files/LLVM
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里建议弄一个目录软链接，或者直接拷贝过来。不会用 mklink 可以看看这篇文章：&lt;a class=&#34;link&#34; href=&#34;https://blog.walterlv.com/post/ntfs-link-comparisons.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;比较 Windows 上四种不同的文件（夹）链接方式（NTFS 的硬链接、目录联接、符号链接，和大家熟知的快捷方式）
&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# C:/Program Files/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmd /c mklink /J LLVM &amp;lt;LLVM_PATH&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后这里需要一个脚本来调用 UBT，可以考虑用 vscode 内置的 tasks，也可也用 python 等脚本语言，假如要用 vsocde tasks：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建文件&lt;code&gt;.vscode/tasks.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设 UE 目录在 &lt;code&gt;C:/Program Files/Epic Games/UE_4.27&lt;/code&gt;，新建项目名称为&lt;code&gt;demo&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;tasks&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Gen Generated Code&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Engine/Binaries/DotNET/UnrealBuildTool.exe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;demoEditor&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;project name&amp;gt;Editor
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Win64&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DebugGame&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-SkipBuild&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-project=${workspaceFolder}/demo.uproject&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-game&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-engine&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;options&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;cwd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;C:/Program Files/Epic Games/UE_4.27&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Subtask:GenClangDatabase&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Engine/Binaries/DotNET/UnrealBuildTool.exe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;demoEditor&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;project name&amp;gt;Editor
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Win64&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DebugGame&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-SkipBuild&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-project=${workspaceFolder}/demo.uproject&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-game&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-engine&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-mode=GenerateClangDatabase&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;options&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;cwd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;C:/Program Files/Epic Games/UE_4.27&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Subtask:MoveCompileCommands&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;move&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-Force&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;compile_commands.json&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;${workspaceFolder}/.vscode&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;options&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;cwd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;C:/Program Files/Epic Games/UE_4.27&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Gen Compile Commands&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;dependsOn&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Subtask:GenClangDatabase&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Subtask:MoveCompileCommands&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;dependsOrder&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sequence&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/507625365&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Windows 下使用 Vscode + Clangd 搭建 UE4 开发环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>浏览器插件</title>
        <link>https://star-hengxing.github.io/p/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/</link>
        <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/</guid>
        <description>&lt;p&gt;使用 edge，不需要科学上网就能在不同电脑同步插件&lt;/p&gt;
&lt;h2 id=&#34;整洁&#34;&gt;整洁&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;清理广告 -&amp;gt; AdGuard&lt;/li&gt;
&lt;li&gt;移除 cookies 提醒 -&amp;gt; I don&amp;rsquo;t care about cookies&lt;/li&gt;
&lt;li&gt;移除 url 跟踪参数 -&amp;gt; ClearURLs&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;效率&#34;&gt;效率&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;生成目录 -&amp;gt; Smart TOC&lt;/li&gt;
&lt;li&gt;浏览网页 -&amp;gt; Vimium C&lt;/li&gt;
&lt;li&gt;鼠标悬停链接显示图像/视频 -&amp;gt; Imagus&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;贴心工具&#34;&gt;贴心工具&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;网页截图 -&amp;gt; Awesome Screenshot&lt;/li&gt;
&lt;li&gt;听歌 -&amp;gt; Listen 1&lt;/li&gt;
&lt;li&gt;自定义个人主页 -&amp;gt; Custom New Tab URL&lt;/li&gt;
&lt;li&gt;破解网页限制复制 -&amp;gt; SuperCopy&lt;/li&gt;
&lt;li&gt;github 代码文件树 -&amp;gt; Octotree&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;集成&#34;&gt;集成&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Aria2 for Edge&lt;/li&gt;
&lt;li&gt;KeePassXC-Browser&lt;/li&gt;
&lt;li&gt;v2ex plus&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tampermonkey&#34;&gt;Tampermonkey&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;B站增强 -&amp;gt; Bilibili Evolved&lt;/li&gt;
&lt;li&gt;移除 url 跟踪参数 -&amp;gt; Bilibili 干净链接&lt;/li&gt;
&lt;li&gt;秒传 -&amp;gt; rapidupload-userscript&lt;/li&gt;
&lt;li&gt;给片假名显示原词 -&amp;gt; 片假名终结者&lt;/li&gt;
&lt;li&gt;知乎增强&lt;/li&gt;
&lt;li&gt;贴吧页面精简&lt;/li&gt;
&lt;li&gt;护眼模式&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43; 胡言乱语X1</title>
        <link>https://star-hengxing.github.io/p/c-%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%ADx1/</link>
        <pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/c-%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%ADx1/</guid>
        <description>&lt;h2 id=&#34;某些-stl-容器&#34;&gt;某些 STL 容器&lt;/h2&gt;
&lt;p&gt;在刷 leetcode，其中某道题中的代码片段是这样的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string res;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;res.resize(size &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// res.reserve(size - i);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; size; i &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, j &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res[j] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; arr[i] &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// res.push_back(arr[i] + &amp;#39;0&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;没注释的代码比注释的快了几ms，原因如下&lt;/p&gt;
&lt;p&gt;因为容器一开始是空的，不需要考虑拷贝原来的元素&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;resize 重新分配内存并且默认初始化，size 改变（大概开销 malloc + memset）&lt;/li&gt;
&lt;li&gt;reserve 重新分配了内存，不初始化，size 不变&lt;/li&gt;
&lt;li&gt;push_back 需要检查 size 有没有大于 capacity，多了分支的开销&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然而这里代码也不是最快的，思考一下，这里 resize 还多了一个 memset 的开销，所以最优解应该是，用自己写的 vector（逃&lt;/p&gt;
&lt;p&gt;不知道是历史原因还是标准委员会根本没考虑到，应该加多几个函数来表示需不需要初始化&lt;/p&gt;
&lt;h2 id=&#34;改造容器&#34;&gt;改造容器&lt;/h2&gt;
&lt;p&gt;这里先看一个别人家的 vector：&lt;a class=&#34;link&#34; href=&#34;https://github.com/cmazakas/less/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Less&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看一下某个代码片段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;default_init_t&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;constexpr&lt;/span&gt; default_init_t default_init;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;with_capacity_t&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;constexpr&lt;/span&gt; with_capacity_t with_capacity;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector(default_init_t, size_type &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; size)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt;construct(size, size, [](&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; p, &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;) { &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; (p, placement_tag) T; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector(size_type size)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt;construct(size, size,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 [](&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; p, &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;) { &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; (p, placement_tag) T(); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector(with_capacity_t, size_type &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; capacity)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt;construct(&lt;span style=&#34;color:#bd93f9&#34;&gt;0u&lt;/span&gt;, capacity, [](&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;) {});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector(size_type size, T &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt;construct(size, size,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 [&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;](&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; p, &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;) { &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; (p, placement_tag) T(value); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;思考🤔，直接把一个结构体类型作为参数？算了直接去 c++ 群问一下&lt;/p&gt;
&lt;p&gt;哦，原来这个叫&lt;code&gt;tag dispatch&lt;/code&gt;，才发现这语法在（MSVC STL）到处都是，感觉不如多写个 make 系列函数，而不是重载构造函数&lt;/p&gt;
&lt;p&gt;我觉得更好的实践应该是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 分配内存，size 改变，默认初始化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; vector&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; make_default_init(std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;size_t size, &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; val &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; T{});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 分配内存，size 改变，不进行初始化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; vector&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; make_default_without_init(std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;size_t size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 分配内存，size 不变，不进行初始化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; vector&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; make_with_capacity(std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;size_t size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 重新分配内存，size 改变，不进行初始化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;resize_without_init&lt;/span&gt;(std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;size_t size);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;这个库还有个设计是，抛弃 std::allocator，使用自定义 new 和 delete&lt;/p&gt;
&lt;p&gt;std::allocator 这玩意设计有误，扔掉很正常，至于为什么，看&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/50997867/answer/2212678027&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这个&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;自增运算符&#34;&gt;自增运算符&lt;/h2&gt;
&lt;p&gt;在最上面的代码，里面自增1都是使用&lt;code&gt;+=&lt;/code&gt;，这是好的代码风格&lt;/p&gt;
&lt;p&gt;有时候你会看见这种代码：&lt;code&gt;++array[index++]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;前缀/后缀自增运算符赶紧死一死，后出世的语言基本都没有&lt;code&gt;++&lt;/code&gt;这个语法了&lt;/p&gt;
&lt;p&gt;更让我觉得恶心的是，群友在 AMD 的笔试说考&lt;code&gt;i+++++i&lt;/code&gt;这种题，就算是外企我也想开喷：中国本土化了这是，真接“谭教授”的地气啊&lt;/p&gt;
&lt;p&gt;别说能考你 体系结构/操作系统/编译器 的知识，首先有一个大前提就是，&lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/language/ub&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ub&lt;/a&gt; 不能拿来做题目&lt;/p&gt;
</description>
        </item>
        <item>
        <title>渲染引擎的架构</title>
        <link>https://star-hengxing.github.io/p/%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E%E7%9A%84%E6%9E%B6%E6%9E%84/</link>
        <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E%E7%9A%84%E6%9E%B6%E6%9E%84/</guid>
        <description>&lt;p&gt;学vulkan时的笔记（胡言乱语&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;渲染需要呈现最终结果，所以和游戏引擎是“耦合”的&lt;/p&gt;
&lt;p&gt;写一个简单的渲染引擎，其实和写一个游戏引擎也没什么区别，因为物理和动画的呈现依赖于渲染&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里所说的渲染应该不包含各种shader效果，更类似于怎么调图形api&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以写渲染引擎，本质还是写游戏引擎，那么最终还是要参考游戏引擎的架构&lt;/p&gt;
&lt;p&gt;学vulkan也一样，最终都会写成渲染引擎，所以提前架构一下比较好。这样在使用&lt;a class=&#34;link&#34; href=&#34;https://vulkan-tutorial.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;vulkan tutorial&lt;/a&gt;学习时，不局限于单文件恶心自己&lt;/p&gt;
&lt;h2 id=&#34;调api渲染的流程&#34;&gt;调api渲染的流程&lt;/h2&gt;
&lt;p&gt;加载数据到cpu/gpu，在gpu描述数据的布局，如何操作数据&lt;/p&gt;
&lt;p&gt;虽然就短短一行字，但拆分下来每一部分都可以讲很多&lt;/p&gt;
&lt;h3 id=&#34;资产管理&#34;&gt;资产管理&lt;/h3&gt;
&lt;p&gt;资产管理，可以简单自定义一个自己的资产文件格式，可以参考&lt;a class=&#34;link&#34; href=&#34;https://vkguide.dev/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;vulkan guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的想法是，定义一个最底层的存储格式，如 metadata + data，data 可以使用&lt;code&gt;lz4&lt;/code&gt;算法进行压缩&lt;/p&gt;
&lt;p&gt;metadata 可以是格式&lt;strong&gt;版本&lt;/strong&gt;、data 的大小、是否&lt;strong&gt;加密&lt;/strong&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;然后又可以自定义一个 texture 和 mesh 的格式，也是 metadata + data 模式，然后把这些打包塞给上面格式的 data 里&lt;/p&gt;
&lt;p&gt;然后我们还需要一个转换器，负责把不同的模型格式（比如obj）转换成我们自定义的格式&lt;/p&gt;
&lt;p&gt;思路理清的话，基本上都是一些工程脏活了，实现难度不大&lt;/p&gt;
&lt;h3 id=&#34;待续&#34;&gt;待续&lt;/h3&gt;
&lt;p&gt;等我过一遍 unity 的 urp&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/339592354&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;有关图形学入门的一些思考·谈谈Vulkan&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>多态</title>
        <link>https://star-hengxing.github.io/p/%E5%A4%9A%E6%80%81/</link>
        <pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E5%A4%9A%E6%80%81/</guid>
        <description>&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;
&lt;p&gt;在实现我的&lt;a class=&#34;link&#34; href=&#34;https://github.com/star-hengxing/cpu_offline_renderer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;离线渲染器&lt;/a&gt;中，用到了大量oop（其实就是基类然后继承）&lt;/p&gt;
&lt;p&gt;我有一个&lt;code&gt;Shape&lt;/code&gt;基类，里面接口全声明为标准的纯虚函数接口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;virtual&lt;/span&gt; TYPE &lt;span style=&#34;color:#50fa7b&#34;&gt;FUNCTION&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当你继承这个类后，继承类必须实现这个接口，不然编译报错&lt;/p&gt;
&lt;p&gt;一开始还没有写实现，但类已经继承了，没办法，在接口开个洞（真难看啊&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;virtual&lt;/span&gt; TYPE &lt;span style=&#34;color:#50fa7b&#34;&gt;FUNCTION&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是我基于 C++20 标准库的&lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/utility/source_location&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;source_location&lt;/a&gt;写了一个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;[[noreturn]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; unimplemented(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;source_location location &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;source_location&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;current())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;cerr &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; location.file_name()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; location.line()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;] &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; location.function_name()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; unimplemented!&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit(&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还没有实现接口的时候留下&lt;code&gt;unimplemented&lt;/code&gt;，然后运行时报错&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;source_location&lt;/code&gt;暂时只有clang不支持（clang对C++20支持太慢了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;网上冲浪时看到&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/491602524/answer/2166170176&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;有人说&lt;/a&gt;，接口虚函数实现动态多态是一种糟糕实践，优雅的做法是&lt;code&gt;Existential Type&lt;/code&gt;，在C++社区称为&lt;code&gt;sean parent polymorphism&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;详细可以看这个视频&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=PSxo85L2lC0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;John Bandela “Polymorphism != Virtual: Easy, Flexible Runtime Polymorphism Without Inheritance”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.reddit.com/r/cpp/comments/dguo3h/john_bandela_polymorphism_virtual_easy_flexible/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;reddit上的关于该视频的讨论&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;什么是多态&#34;&gt;什么是多态&lt;/h2&gt;
&lt;h3 id=&#34;特定多态&#34;&gt;特定多态&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Ad_hoc_polymorphism&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ad hoc polymorphism&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;函数重载，当然运算符重载也一样&lt;/p&gt;
&lt;h3 id=&#34;参数化多态&#34;&gt;参数化多态&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Parametric_polymorphism&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Parametric polymorphism&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;类似 C++ 的模板，也可以称为泛型&lt;/p&gt;
&lt;h3 id=&#34;子类型多态&#34;&gt;子类型多态&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Subtyping&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Subtyping&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;平时编程用的最多的，继承基类，调用相同符号的方法&lt;/p&gt;
&lt;h2 id=&#34;existential-type&#34;&gt;Existential Type&lt;/h2&gt;
&lt;p&gt;中文语境下叫&lt;strong&gt;类型擦除/隐藏类型实现&lt;/strong&gt;（机翻直译叫存在类型）&lt;/p&gt;
&lt;p&gt;看一段 &lt;a class=&#34;link&#34; href=&#34;https://github.com/IFeelBloated/Type-System-Zoo/blob/master/existential%20type.cxx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C++ 代码&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;functional&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// type Messenger = ∃ a. { x: a, Print: a -&amp;gt; string -&amp;gt; ⊥ }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Messenger&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; QuantificationBound &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;(std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;string_view)&lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;function&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;QuantificationBound&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Messenger() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Messenger(&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;](&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; msg) { x.Print(msg); };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Print&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; msg) &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f(msg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;A&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Print&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; msg) &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;A says &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; msg &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;B&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Print&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; msg) &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;B says &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; msg &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;()&lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Messenger&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;{ A{}, B{} };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;y&lt;/span&gt; : x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        y.Print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我觉得有点像上面所说的子类型&lt;/p&gt;
&lt;p&gt;在代码中，用&lt;code&gt;std::function&lt;/code&gt;封装了真正的调用函数，而不需要考虑&lt;strong&gt;具体类型&lt;/strong&gt;。&lt;code&gt;std::function&lt;/code&gt;除了保存函数状态，还有运行时多态。但在不同 stl 的实现，有些是直接用 virtual，有些手动用指针打虚表。虽然看起来底层实现一样，不过好处就是，不需要给类函数加上 virtual，这算是一种&lt;strong&gt;解耦&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但用&lt;code&gt;std::function&lt;/code&gt;实现其实有一些缺陷，比如将 lambda 函数赋值给它的时候，lambda capture 的变量太多会&lt;strong&gt;动态分配内存&lt;/strong&gt;。比较推荐的是用 template&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/455347112&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Existential type 是什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/165514192&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;多态都不知道，谈什么对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/370563773&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;关于std function和lambda function的性能调试&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>收藏夹（知识分类）</title>
        <link>https://star-hengxing.github.io/p/%E6%94%B6%E8%97%8F%E5%A4%B9%E7%9F%A5%E8%AF%86%E5%88%86%E7%B1%BB/</link>
        <pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E6%94%B6%E8%97%8F%E5%A4%B9%E7%9F%A5%E8%AF%86%E5%88%86%E7%B1%BB/</guid>
        <description>&lt;p&gt;&lt;strong&gt;下面的目录不好使，只要小部分能跳转，点右边的目录跳转吧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/people/heng-xing-55-30&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;知乎的点赞&lt;/a&gt;其实是当收藏用的，
这么多点赞，打算找时间用爬虫全部爬下来慢慢整理&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e6%95%b0%e5%ad%a6&#34; &gt;数学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e7%89%a9%e7%90%86&#34; &gt;物理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e4%bf%a1%e6%81%af&#34; &gt;信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%90%86%e8%ae%ba&#34; &gt;计算机理论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e8%bd%af%e4%bb%b6%e5%b7%a5%e7%a8%8b&#34; &gt;软件工程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e7%90%86%e8%ae%ba&#34; &gt;理论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e5%ae%9e%e8%b7%b5&#34; &gt;实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80&#34; &gt;编程语言&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#c&#34; &gt;C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#c-1&#34; &gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#rust&#34; &gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#haskell&#34; &gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84&#34; &gt;体系结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e7%bc%96%e8%af%91%e5%8e%9f%e7%90%86&#34; &gt;编译原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e5%8f%af%e8%a7%86%e5%8c%96&#34; &gt;可视化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e4%bc%98%e5%8c%96&#34; &gt;优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e9%ab%98%e6%80%a7%e8%83%bd%e8%ae%a1%e7%ae%97&#34; &gt;高性能计算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9b%be%e5%bd%a2%e5%ad%a6&#34; &gt;计算机图形学&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e6%97%8b%e8%bd%ac&#34; &gt;旋转&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e9%9f%b3%e8%a7%86%e9%a2%91&#34; &gt;音视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e9%80%86%e5%90%91&#34; &gt;逆向&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#linux&#34; &gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e5%b7%a5%e5%85%b7&#34; &gt;工具&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e5%9c%a8%e7%ba%bf%e5%b7%a5%e5%85%b7&#34; &gt;在线工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#git&#34; &gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#unity&#34; &gt;Unity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e4%ba%8c%e6%ac%a1%e5%85%83&#34; &gt;二次元&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#galgame&#34; &gt;galgame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e8%b5%84%e6%ba%90&#34; &gt;资源&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e5%9c%a8%e7%ba%bf&#34; &gt;在线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e7%94%9f%e8%82%89&#34; &gt;生肉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e9%9f%b3%e5%a3%b0&#34; &gt;音声&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e8%89%b2%e5%ba%a6%e5%ad%a6&#34; &gt;色度学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%e6%97%a5%e8%af%ad&#34; &gt;日语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#misc&#34; &gt;misc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数学&#34;&gt;数学&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/105704401&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;我在知乎学数学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/551438234&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;图形数学方法：FFT（快速傅里叶）的原理讲述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/36512716&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;有没有比较好的学习高等数学，线性代数，概率论数理统计的英文书籍推荐？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;物理&#34;&gt;物理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://matthias-research.github.io/pages/tenMinutePhysics/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ten Minute Physics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信息&#34;&gt;信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/513839042&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;压缩算法lzma2,zstd,rar,brotli,lz4,lizardv1对比推荐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计算机理论&#34;&gt;计算机理论&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/139397047&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;计算复杂度理论基础（一）Preliminaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件工程&#34;&gt;软件工程&lt;/h2&gt;
&lt;h3 id=&#34;理论&#34;&gt;理论&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://semver.org/lang/zh-CN/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;语义化版本 2.0.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/560653798&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;读《Fundamentals of Software Architechture》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/64004026&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;可逆计算：下一代软件构造理论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/544957616&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;抽象的幻觉（1）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/552864392&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;抽象的幻觉（2）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://draveness.me/whys-the-design/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;为什么这么设计系列文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实践&#34;&gt;实践&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/KillerAery/p/11746639.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;游戏架构设计——面向数据编程（DOP）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/KillerAery/p/16333348.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;游戏架构设计——高性能并行编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/228716574&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;为什么我认为Rust的Result错误处理方式不如Exception&lt;/a&gt;，探讨了&lt;code&gt;Monad&lt;/code&gt;和工业界主流的异常处理两种错误处理的差异&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gpp.tkchu.me/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;游戏编程模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/572540319&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;阿里云块存储团队软件工程实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/574069391&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Chromium 渲染流水线——字节码到像素的一生&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://growing-products.paralect.com/a-development-process-startup-founders-should-use-to-ship-features-weirdly-fast&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;A development process startup founders should use to ship features weirdly fast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编程语言&#34;&gt;编程语言&lt;/h2&gt;
&lt;h3 id=&#34;c&#34;&gt;C&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://liujiacai.net/blog/2022/04/30/modern-c/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;现代化 C 使用体验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mccue.dev/pages/7-27-22-c-errors&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The different ways to handle errors in C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://faultlore.com/blah/c-isnt-a-language/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C Isn&amp;rsquo;t A Programming Language Anymore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c-1&#34;&gt;C++&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://lhprojects.github.io/blog/src/Singleton.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;单例模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://bot-man-jl.github.io/articles/?post=2018/Cpp-Struct-Field-Reflection&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;简单的 C++ 结构体字段反射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://qamichaelpeng.github.io/2014/11/20/sharepointer_1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;make a shared_ptr from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/column/c_1360316516295032832&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C++ 系列专题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://danlark.org/2022/04/20/changing-stdsort-at-googles-scale-and-beyond/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Changing std::sort at Google’s Scale and Beyond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/553387258&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最好的C++学习教程(上篇)——The Cherno CppSeries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/553405837&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最好的C++学习教程(下篇)——The Cherno CppSeries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;More C++ Idioms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learnmoderncpp.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Learn Modern C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.infoq.cn/article/KsctTt5cIpCCl5T2SmtJ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;现代化工具链在大规模 C++ 项目中的技术实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.conan.io/2022/10/13/Different-flavors-Clang-compiler-Windows.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Understanding the different flavors of Clang C and C++ compilers in Windows&lt;/a&gt;，讲述了C++ 不同编译工具链的差异&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/568518673&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;从无栈协程到C++异步框架&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rust&#34;&gt;Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.pan93.com/what-is-rust-async/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文組也能懂的 Rust async 機制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cheats.rs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rust Language Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;haskell&#34;&gt;Haskell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://lhbg-book.link/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Learn Haskell by building a blog generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;体系结构&#34;&gt;体系结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://coolshell.cn/articles/20793.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;与程序员相关的CPU缓存知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/zVReUAUJihBLorNo3o0luQ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;深入理解CPU cache：组织、一致性（同步）、编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/timlly/p/11471507.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;深入GPU硬件架构及运行机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/25527491/answer/56571062&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何设计内存池？ - 韦易笑的回答 - 知乎&lt;/a&gt;，内存管理是最能体现体系结构知识的地方之一&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/akhin/microarchitecture-cheatsheet&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microarchitecture cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://johnysswlab.com/when-an-instruction-depends-on-the-previous-instruction-depends-on-the-previous-instructions-long-instruction-dependency-chains-and-performance/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;When an instruction depends on the previous instruction depends on the previous instructions… : long instruction dependency chains and performance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编译原理&#34;&gt;编译原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/553543765&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【科普】编译器的构建基本原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/FrankHB/pl-docs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Programming Language Documentations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.iteye.com/blog/rednaxelafx-492667&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;虚拟机随谈（一）：解释器，树遍历解释器，基于栈与基于寄存器，大杂烩&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://devtool.tech/double-type&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;浮点数可视化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://regex-vis.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;正则表达式可视化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://setosa.io/blog/2014/07/26/markov-chains/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;马尔科夫链可视化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://eater.net/quaternions&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;四元数可视化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://visualgo.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据结构可视化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优化&#34;&gt;优化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://kristerw.github.io/2021/10/19/fast-math/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;浮点数计算优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wunkolo.github.io/post/2022/10/vfixupimm-signum/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;vfixupimm: signum&lt;/a&gt;，用 AVX 优化取浮点数符号&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://johnysswlab.com/when-an-instruction-depends-on-the-previous-instruction-depends-on-the-previous-instructions-long-instruction-dependency-chains-and-performance/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;When an instruction depends on the previous instruction depends on the previous instructions… : long instruction dependency chains and performance&lt;/a&gt;，CPU 指令依赖链太长拖慢速度，但依赖链解决不了，只能交叉两个依赖链提高效率&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;高性能计算&#34;&gt;高性能计算&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://heptagonhust.github.io/HPC-roadmap/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;高性能计算学习路线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/503037055&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;从零开始的C/C++高性能编程指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/533708198&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C++ 高性能编程实战系列（1）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/534004366&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C++ 高性能编程实战系列（2）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/537260855&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C++ 高性能编程实战系列（3）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/column/c_1515272289578479616&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CMU15418 并行计算机架构与编程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计算机图形学&#34;&gt;计算机图形学&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.iquilezles.org/www/articles/floatingbar/floatingbar.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使用有理数进行渲染&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://agraphicsguynotes.com/posts/how_does_pbrt_verify_bxdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何验证BXDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/KillerAery/p/15719431.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;实时&amp;amp;离线皮肤渲染技术（Real-time &amp;amp; Offline Skin Rendering）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://dassaultsystemes-technology.github.io/EnterprisePBRShadingModel/spec-2022x.md.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Enterprise PBR Shading Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://iquilezles.org/articles/intersectors/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;多种几何体求交&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://jacco.ompf2.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How to build a BVH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;旋转&#34;&gt;旋转&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://thenumbat.github.io/Exponential-Rotations/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;可视化和公式推导&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;音视频&#34;&gt;音视频&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ffmpeg.xianwaizhiyin.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FFmpeg原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://feater.top/ffmpeg/ffmpeg-learning-indexes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FFmpeg5开发入门系列索引&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;逆向&#34;&gt;逆向&lt;/h2&gt;
&lt;p&gt;这里我推荐 CSAPP Lab2-Bomb Lab&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://bbs.pediy.com/thread-271332.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[原创] 逆向并提取QQ截图&amp;ndash;OCR和其他功能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://101.ustclug.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux 101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/NakanoMikuOrg/arch-guide&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;archlinux 简明指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://twitter.com/devops_tech/status/1525708053487570944&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一张图理解Linux文件权限&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://explainshell.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;解释 shell 参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/espoal/awesome-iouring&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Delightful io_uring packages and resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工具&#34;&gt;工具&lt;/h2&gt;
&lt;h3 id=&#34;在线工具&#34;&gt;在线工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhichun.xyz/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;知春在线工具箱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://tool.tsutsu.one/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;つつの工具箱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.itdog.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;在线Ping/测速等&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;git&#34;&gt;Git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ohshitgit.com/zh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;在使用 git 时的一些尴尬场景里的修复方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gitexplorer.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git Command Explorer(git速查表)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;unity&#34;&gt;Unity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://catlikecoding.com/unity/tutorials/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Catlike Coding unity tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/452292806&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Unity SRP下做PBR基于物理的渲染和踩坑（一）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二次元&#34;&gt;二次元&lt;/h2&gt;
&lt;h3 id=&#34;galgame&#34;&gt;galgame&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/345573921&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;galgame常用名词中日对照小辞典&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://space.bilibili.com/819912/channel/detail?cid=40883&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;混沌之子 CHAOS;CHILD LOVE chu chu!!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;资源&#34;&gt;资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://vcb-s.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;VCB-Studio&lt;/a&gt;，专门修复动漫画质&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pan.cycg.xyz/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;次元图书馆&lt;/a&gt;，galgame资源多，od盘下载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://hacg.me/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;琉璃神社(无注册要求)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://lzacg.us/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;量子ACG(无注册要求，主要是游戏)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://18moe.co/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;萌次元(无法注册，资源社区)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zodgame.xyz/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Zodgame(注册已关闭，论坛)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zuiacg.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最ACG(无注册要求，资源社区)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://aceacg.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ACEACG(在线本子漫画)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.sshs.pw/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;紳士会所(无注册，资源社区)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.uzxun.in/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UZXun社区(无注册要求，资源论坛)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.wnacg.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;紳士漫畫(无注册，在线本子漫画)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ahri-hentai.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;松鼠症倉庫(无注册要求，在线本子漫画)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://moeli-desu.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;梦璃(无注册要求，资源社区）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://bulidesu.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;布璃(无注册要求，声音资源社区)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gkdworld.xyz/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;资源统筹局(答题注册获取邀请码，资源社区)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://acg02.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;次元计划(资源社区)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hmoe11.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;梦幻之乡(无注册要求，资源社区)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.wanie.xyz/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;心動漫(答题注册邀请码，资源转载)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://saber.love/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;saber酱的抱枕(个人资源博客)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.dmoe.in/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;暗萌(无注册要求，资源社区)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.reimu.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;灵梦御所(个人资源博客，官方有社区软件)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.mikuclub.cc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;初音社(无注册要求，资源社区)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://chaguan.us/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;绅士茶馆(资源社区，无注册)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.futa404.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;扶她404(资源社区，无注册要求)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://bbs.sskft5.top/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;绅士咖啡厅(资源论坛，注册邀请码获取)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;在线&#34;&gt;在线&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bimiacg4.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bimi动漫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://ysjdm.net&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;异世界动漫&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;生肉&#34;&gt;生肉&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ggbases.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ggbases.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sukebei.nyaa.si&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://sukebei.nyaa.si&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.anime-sharing.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.anime-sharing.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://bbs4.2djgame.net&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bbs4.2djgame.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://bbs.kfpromax.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;绯月&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ercygame.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;幽隐恋梦&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;音声&#34;&gt;音声&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.asmr.one/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ASMR Online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://eatasmr.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;eat ASMR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;色度学&#34;&gt;色度学&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/24214731&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;色彩空间基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/24281841&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;色彩空间表示与转换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/24312022&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;光谱渲染的几个例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/27165715&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;色温、白平衡与色彩恒常性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/100228286&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;色彩科学学习笔记：专栏自述、目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;日语&#34;&gt;日语&lt;/h2&gt;
&lt;p&gt;日语学习网站&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.sigure.tw/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;時雨の町&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.duolingo.com/learn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;duolingo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.lingq.com/zh-cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LingQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://res.wokanxing.info/jpgramma/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;日语语法指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;misc&#34;&gt;misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.maizure.org/projects/decoded-gnu-coreutils/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GNU工具实现解密&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/508796156&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;漫画数据化——计算机科学在漫画领域的相关研究简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/eryajf/Thanks-Mirror&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;整理记录各个包管理器，系统镜像，以及常用软件的好用镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;图解Functor和Monad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/eryajf/HowToStartOpenSource&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub开源项目维护指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.matrixcalculus.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;在线矩阵计算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://uzpphfoi9f.feishu.cn/docs/doccn8Mn9ik72UKLrMFJuzu78Pb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;三维重建&amp;amp;点云处理&amp;amp;图形渲染&amp;amp;网格处理&amp;amp;游戏开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/161907506&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;（可能是）全网最好用的 HDR 术语速查手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://icyfenix.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;凤凰架构 构建可靠的大型分布式系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wantwords.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;汉语反向词典&lt;/a&gt;，查近义词&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ciechanow.ski/lights-and-shadows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Lights and Shadows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wangchujiang.com/reference/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Quick Reference&lt;/a&gt;，针对开发人员的速查表&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://course.fast.ai/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Practical Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>随便记录下看过的书吧</title>
        <link>https://star-hengxing.github.io/p/%E9%9A%8F%E4%BE%BF%E8%AE%B0%E5%BD%95%E4%B8%8B%E7%9C%8B%E8%BF%87%E7%9A%84%E4%B9%A6%E5%90%A7/</link>
        <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E9%9A%8F%E4%BE%BF%E8%AE%B0%E5%BD%95%E4%B8%8B%E7%9C%8B%E8%BF%87%E7%9A%84%E4%B9%A6%E5%90%A7/</guid>
        <description>&lt;p&gt;&lt;strong&gt;技术书看新不看旧&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;计算机科学&#34;&gt;计算机科学&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;人月神话&lt;/li&gt;
&lt;li&gt;黑客与画家&lt;/li&gt;
&lt;li&gt;敏捷软件开发&lt;/li&gt;
&lt;li&gt;代码整洁之道&lt;/li&gt;
&lt;li&gt;程序员的自我修养 : 链接、装载与库&lt;/li&gt;
&lt;li&gt;七周七语言&lt;/li&gt;
&lt;li&gt;代码本色&lt;/li&gt;
&lt;li&gt;x86汇编语言 : 从实模式到保护模式&lt;/li&gt;
&lt;li&gt;深入理解计算机系统&lt;/li&gt;
&lt;li&gt;Head First设计模式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;编程语言&#34;&gt;编程语言&lt;/h3&gt;
&lt;h4 id=&#34;c&#34;&gt;C&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;C Primer Plus&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;c-1&#34;&gt;C++&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;C++ Primer&lt;/li&gt;
&lt;li&gt;C++ Primer PLus&lt;/li&gt;
&lt;li&gt;Effective C++&lt;/li&gt;
&lt;li&gt;More Effective C++&lt;/li&gt;
&lt;li&gt;Effective Modern C++&lt;/li&gt;
&lt;li&gt;C++ Best Practices: 45ish Simple Rules with Specific Action Items for Better C++&lt;/li&gt;
&lt;li&gt;C++性能优化指南&lt;/li&gt;
&lt;li&gt;C++并发编程实战&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;rust&#34;&gt;Rust&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;深入浅出Rust&lt;/li&gt;
&lt;li&gt;Rust程序设计语言&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;python&#34;&gt;Python&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Python编程 从入门到实践&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;haskell&#34;&gt;Haskell&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Haskell趣学指南&lt;/li&gt;
&lt;li&gt;Haskell函数式编程入门&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数据结构与算法&#34;&gt;数据结构与算法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;大话数据结构&lt;/li&gt;
&lt;li&gt;算法导论&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;计算机体系结构&#34;&gt;计算机体系结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/26604008/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;计算机组成与设计：硬件/软件接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/1998341/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;计算机系统要素 : 从零开始构建现代计算机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/4822685/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;编码 : 隐匿在计算机软硬件背后的语言&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;操作系统&#34;&gt;操作系统&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一个64位操作系统的设计与实现&lt;/li&gt;
&lt;li&gt;Linux内核设计与实现&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/27096665/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;现代操作系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/35208251/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;现代操作系统：原理与实现&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;计算机网络&#34;&gt;计算机网络&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;计算机网络自顶向下方法&lt;/li&gt;
&lt;li&gt;TCP/IP详解 卷1：协议&lt;/li&gt;
&lt;li&gt;图解HTTP&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;计算机图形学&#34;&gt;计算机图形学&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Fundamentals of Computer Graphics&lt;/li&gt;
&lt;li&gt;Ray Tracing Gems series&lt;/li&gt;
&lt;li&gt;全局光照技术&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;实时渲染&#34;&gt;实时渲染&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Real-Time Rendering&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;离线渲染&#34;&gt;离线渲染&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;The Ray Tracer Challenge&lt;/li&gt;
&lt;li&gt;Ray Tracing in One Weekend series&lt;/li&gt;
&lt;li&gt;Advanced Global Illumination&lt;/li&gt;
&lt;li&gt;Physically Based Rendering: From Theory to Implementation&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数学&#34;&gt;数学&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/26651221/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;线性代数的几何&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/30310517/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;线性代数及其应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/4010125/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;漫画线性代数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/26600495/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数值分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/4905198/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;从博弈问题到方法论学科&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;物理&#34;&gt;物理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/1155816/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;现代光学基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/4062447/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;光学原理&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;游戏&#34;&gt;游戏&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/26880704/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;游戏编程模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/25815142/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;游戏引擎架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/26791007/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;游戏设计艺术&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;日语&#34;&gt;日语&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/25981564/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;新版中日交流标准日本语初级&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;音乐&#34;&gt;音乐&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/26932815/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;超简单的乐理学习图解版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/26825412/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;认识乐理：视唱练耳同步学&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;杂书&#34;&gt;杂书&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/19950884/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;视觉艺术用光&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/20513213/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;色彩与光线 写实主义绘画指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/35050614/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;我的二本学生&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/25752043/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;信息简史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/2305237/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;信息论基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/21359219/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;信号与系统&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>使用KeePass作为密码管理器</title>
        <link>https://star-hengxing.github.io/p/%E4%BD%BF%E7%94%A8keepass%E4%BD%9C%E4%B8%BA%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E5%99%A8/</link>
        <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E4%BD%BF%E7%94%A8keepass%E4%BD%9C%E4%B8%BA%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E5%99%A8/</guid>
        <description>&lt;p&gt;最近超星学习通数据泄露大家应该都知道吧，全国上下学生很多都依赖这么一个中心化的网课平台。而且学习通可能还是&lt;strong&gt;明文存储密码&lt;/strong&gt;，这下坏事了，直接撞库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;撞库攻击是网络犯罪分子试图使用一组帐密同时访问多个帐户&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我很久以前就知道有密码管理器的存在，但我是懒鬼，所以没弄过。这次事件提醒了我，还是别偷懒了（&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;KeePass是什么呢&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;KeePass is an encrypted password database format. It is an alternative to online password managers and is supported on all major platforms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我这里推荐使用跨平台的&lt;strong&gt;KeePassXC&lt;/strong&gt;客户端，原始KeePass客户端实在太丑陋了&lt;/p&gt;
&lt;p&gt;下载客户端后，新建数据库需要一个&lt;strong&gt;主密码&lt;/strong&gt;，这个密码需要你记忆&lt;/p&gt;
&lt;p&gt;我们先来看一个图，来自&lt;a class=&#34;link&#34; href=&#34;https://xkcd.com/936/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xkcd&lt;/a&gt;
&lt;img src=&#34;https://xkcd.in/resources/compiled_cn/d4a068052cf9c7255c0b4c4643ac0b5b.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;密码强度&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;那如何根据上图思路创建一个好密码呢，这里可以看一下&lt;a class=&#34;link&#34; href=&#34;https://theworld.com/~reinhold/diceware.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;diceware&lt;/a&gt;的方法&lt;/p&gt;
&lt;p&gt;这个网站根据diceware方法提供&lt;a class=&#34;link&#34; href=&#34;https://diceware.dmuth.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;在线生成随机英语单词&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果想要生成随机中文词语，可以在此网页找到
&lt;a class=&#34;link&#34; href=&#34;https://pincong.rocks/article/5582&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使用diceware构造好的密码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建好数据库后，保存在本地随便一个目录，然后我们去&lt;strong&gt;KeePassXC&lt;/strong&gt;设置面板开启浏览器集成，下载对应浏览器插件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器插件启动后需要连接&lt;strong&gt;KeePassXC&lt;/strong&gt;客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在网站登录页面，如果数据库里没有对应网站url或者已存在，会提示你为该网站&lt;code&gt;新建/更新&lt;/code&gt;账号密码。如果没有提示，可以手动使用插件，或者直接在&lt;strong&gt;KeePassXC&lt;/strong&gt;客户端手动录入&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;KeePassXC&lt;/strong&gt;里随手就可以生成一个密码，无论是大小写字母数字还是各种特殊符号。如果想使用密码，&lt;code&gt;Ctrl-C&lt;/code&gt;会自动复制到你剪切板上，然后在10秒后清除&lt;/p&gt;
&lt;p&gt;如果手机也要密码管理，安卓客户端可以在&lt;strong&gt;f-droid&lt;/strong&gt;上下载&lt;strong&gt;keepassdx&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;同步&#34;&gt;同步&lt;/h2&gt;
&lt;p&gt;所有信息都在keepass创建的数据库里，这里可以使用一些文件传输软件进行备份同步，或者存github也没啥问题&lt;/p&gt;
</description>
        </item>
        <item>
        <title>在 Windows 上使用 Xmake 配置 Vulkan 开发环境</title>
        <link>https://star-hengxing.github.io/p/%E5%9C%A8-windows-%E4%B8%8A%E4%BD%BF%E7%94%A8-xmake-%E9%85%8D%E7%BD%AE-vulkan-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
        <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E5%9C%A8-windows-%E4%B8%8A%E4%BD%BF%E7%94%A8-xmake-%E9%85%8D%E7%BD%AE-vulkan-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
        <description>&lt;p&gt;&lt;em&gt;也可以是C++小项目的配置&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;开发环境构建&#34;&gt;开发环境构建&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;vscode+xmake+clang+clangd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果在配置过程中有问题，可以先看一下文末的&lt;strong&gt;FQA&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;c编译工具链&#34;&gt;C++编译工具链&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://visualstudio.microsoft.com/vs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Visual Studio 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/llvm/llvm-project/tags&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;clang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构建系统&#34;&gt;构建系统&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://xmake.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xmake&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;vulkan-sdk&#34;&gt;Vulkan SDK&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.lunarg.com/vulkan-sdk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.lunarg.com/vulkan-sdk/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;假装ide的文本编辑器&#34;&gt;假装IDE的文本编辑器&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Visual Studio Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clangd&lt;/li&gt;
&lt;li&gt;XMake&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;上面列出来的工具下载完成后，新建一个目录，在目录下新建&lt;code&gt;xmake.lua&lt;/code&gt;，写入下面内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_project(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;vulkan&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_arch(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;x64&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_warnings(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_languages(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c++20&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_toolchains(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;clang&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_rules(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.debug&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.releasedbg&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.release&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mode.minsizerel&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_requires(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;vulkansdk&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;glfw&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;glm&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_default(&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set_kind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_files(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src/main.cpp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_packages(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;vulkansdk&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;glfw&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;glm&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依赖的 vulkansdk 在上面已经下载，如果用他的 installer 安装会自动设置环境变量，xmake 会根据环境变量自动探测编译器、vulkansdk 的正确位置，glm 和 glfw 由 xmake 的包管理处理&lt;/p&gt;
&lt;h3 id=&#34;编译&#34;&gt;编译&lt;/h3&gt;
&lt;p&gt;测试代码来自&lt;a class=&#34;link&#34; href=&#34;https://vulkan-tutorial.com/Development_environment&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;vulkan tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直接新建一个&lt;code&gt;main.cpp&lt;/code&gt;，把代码复制下来&lt;/p&gt;
&lt;p&gt;一切配置好后，可以测试一下了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xmake run
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出现窗口代表环境配置成功&lt;/p&gt;
&lt;h3 id=&#34;intellisense&#34;&gt;Intellisense&lt;/h3&gt;
&lt;p&gt;xmake会在&lt;code&gt;.vscode&lt;/code&gt;目录自动生成&lt;code&gt;compile_commands.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以我们在&lt;code&gt;.vscode/settings.json&lt;/code&gt;给clangd加上参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;clangd.arguments&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--compile-commands-dir=.vscode&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--header-insertion=never&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--completion-style=detailed&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fqa&#34;&gt;FQA&lt;/h2&gt;
&lt;p&gt;Q: xmake下载包失败怎么办&lt;/p&gt;
&lt;p&gt;A: 查看文档&lt;a class=&#34;link&#34; href=&#34;https://xmake.io/#/zh-cn/package/remote_package?id=%e8%bf%9c%e7%a8%8b%e5%8c%85%e4%b8%8b%e8%bd%bd%e4%bc%98%e5%8c%96&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使用远程包 - xmake&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Q: 编译失败怎么办&lt;/p&gt;
&lt;p&gt;A: 执行&lt;code&gt;xmake -v&lt;/code&gt;，查看详细输出信息&lt;/p&gt;
&lt;p&gt;Q: 我想用vs写代码怎么办&lt;/p&gt;
&lt;p&gt;A: 执行&lt;code&gt;xmake project -k vsxmake -m &amp;quot;debug,release&amp;quot;&lt;/code&gt;生成vs工程文件&lt;/p&gt;
</description>
        </item>
        <item>
        <title>渲染进阶</title>
        <link>https://star-hengxing.github.io/p/%E6%B8%B2%E6%9F%93%E8%BF%9B%E9%98%B6/</link>
        <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E6%B8%B2%E6%9F%93%E8%BF%9B%E9%98%B6/</guid>
        <description>&lt;h2 id=&#34;图形笑话三则&#34;&gt;图形笑话三则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/456526193&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;来点图程破防乐子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/456547512&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;无内鬼，来点图形笑话&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/457506187&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;再来点图程破防乐子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;免费渲染模型&#34;&gt;免费渲染模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://casual-effects.com/data/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;McGuire Computer Graphics Archive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://benedikt-bitterli.me/resources/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rendering Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;博客&#34;&gt;博客&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://agraphicsguynotes.com/posts/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;A GRAPHICS GUY&amp;rsquo;S NOTE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://rayspace.xyz/CG/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Computer Graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.iquilezles.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://yangwc.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YangWC&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://airguanz.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AirGuanZ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/459580639&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;《高级计算机图形学——真实感图像合成》目录及序言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://space.bilibili.com/18010881/article&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OEOTYAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;课程&#34;&gt;课程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cs87-dartmouth.github.io/Fall2022/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CS 87/287 | RENDERING ALGORITHMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cseweb.ucsd.edu/~tzli/cse272/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UCSD CSE 272: Advanced Image Synthesis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cs.uu.nl/docs/vakken/magr/2021-2022/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Advanced Graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cseweb.ucsd.edu/~viscomp/classes/cse168/sp20/168.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CSE 168 Computer Graphics II: Rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cis565-fall-2022.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CIS 565 GPU Programming and Architecture Fall 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;各种效果&#34;&gt;各种效果&lt;/h2&gt;
&lt;h3 id=&#34;光谱&#34;&gt;光谱&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/geometrian/simple-spectral&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Simple Spectral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ceciliavision.github.io/graphics/a6/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spectral Ray Tracing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;天空&#34;&gt;天空&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cgg.mff.cuni.cz/projects/SkylightModelling/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The Sky Dome Appearance Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;彩虹&#34;&gt;彩虹&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cs.dartmouth.edu/wjarosz/publications/sadeghi11physically.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Physically-based simulation of rainbows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;动物毛发&#34;&gt;动物毛发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sites.cs.ucsb.edu/~lingqi/project_page/fur2/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;An Efficient and Practical Near and Far Field Fur Reflectance Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;肥皂泡&#34;&gt;肥皂泡&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://light.informatik.uni-bonn.de/chemomechanical-simulation-of-soap-film-flow-on-spherical-bubbles/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Chemomechanical Simulation of Soap Film Flow on Spherical Bubbles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fqa&#34;&gt;FQA&lt;/h2&gt;
&lt;p&gt;（其实就是把群友讨论结果收藏一下&lt;/p&gt;
&lt;h3 id=&#34;知乎上的常见问题&#34;&gt;知乎上的常见问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/544896061&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何在离线渲染（路径追踪）中实现IBL？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/49029981&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;光线追踪中的透视畸变如何矫正？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/310141645&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;在通常渲染中的漫反射项，究竟是属于反射还是折射？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/364497131&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何将Surface Area Heuristic(表面面积启发式)运用到BVH的构建中？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/509935069/answer/2308766828&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;路径追踪光源重要性采样中为什么要每次均匀选取一个光源？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;微表面模型中几何项使用h还是n&#34;&gt;微表面模型中几何项使用H还是N&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在离线里面，一般用general smith，不需要用到H或者N的，就无所谓了。&lt;/p&gt;
&lt;p&gt;虚幻第一次把G=G1G1带到引擎，也是根据egsr07来的，egsr07用的就是H，但到虚幻那就突然变成N了。这也是有原因的，虚幻把&lt;a class=&#34;link&#34; href=&#34;http://igorsklyar.com/system/documents/papers/28/Schlick94.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Schlick G&lt;/a&gt;当做G1，而不是用对应D项的G1,而Schlick G的确是根据N来的。&lt;/p&gt;
&lt;p&gt;然后heitz后面提出了joint G，heitz的paper里面当然用的H而不是N，但是，虚幻看之前非joint g的代码用的N，就copy过来了，所以现在虚幻的joint g也是用的N。&lt;/p&gt;
&lt;p&gt;不知为啥，unity也用的N，好像大家都用N。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;什么是漫反射&#34;&gt;什么是漫反射&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;先分类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有无折射率突变的表面&lt;/li&gt;
&lt;li&gt;表面是否完全光滑&lt;/li&gt;
&lt;li&gt;透射距离与观察距离的比值大小&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;漫反射到底是什么呢，是材质中参与介质的部分，且特指材质中透射距离非常短的部分 这个距离不是固定短的，它跟你视角观察的距离是相关的，你拿个头发看着跟实心的似得，你拿近看会发现光线还能传过去，当可透射距离小于屏幕上一个像素，那就是漫反射了。它是不是模拟微表面多重散射用的？完全不是。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>从代码到程序</title>
        <link>https://star-hengxing.github.io/p/%E4%BB%8E%E4%BB%A3%E7%A0%81%E5%88%B0%E7%A8%8B%E5%BA%8F/</link>
        <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E4%BB%8E%E4%BB%A3%E7%A0%81%E5%88%B0%E7%A8%8B%E5%BA%8F/</guid>
        <description>&lt;p&gt;随手记录的一些编译原理笔记。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;现代编译器分为前后端，为了进一步降低复杂度(模块化)，前端的流程通常是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;词法分析 -&amp;gt; 语法分析 -&amp;gt; 语义分析
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上一步的输出是下一步的输入。&lt;/p&gt;
&lt;h2 id=&#34;词法分析&#34;&gt;词法分析&lt;/h2&gt;
&lt;p&gt;常见的应用有正则表达式。&lt;/p&gt;
&lt;p&gt;先定义一个映射， tokens = map(字符串)&lt;/p&gt;
&lt;p&gt;这个&lt;code&gt;token&lt;/code&gt;是啥呢，比如说我有下面这个算式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1 + 2 * ３
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解析后：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;１&lt;/td&gt;
&lt;td&gt;整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;加号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;乘号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;整数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们暂时不知道有什么用，但现在我们解决了字符串里的&lt;strong&gt;空格&lt;/strong&gt;，如果字符串里有奇怪的字符，比如&lt;code&gt;#&lt;/code&gt;啥的，也可以报错。&lt;/p&gt;
&lt;p&gt;怎么解析其实也是个大问题，通常用&lt;strong&gt;自动机&lt;/strong&gt;解决这个问题。&lt;/p&gt;
&lt;h2 id=&#34;语法分析&#34;&gt;语法分析&lt;/h2&gt;
&lt;p&gt;把词法分析输出的一堆token，组合成句子，检查句子的语法，最后生成&lt;strong&gt;抽象语法树(AST)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AST用处广泛，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器错误提示&lt;/li&gt;
&lt;li&gt;代码格式化&lt;/li&gt;
&lt;li&gt;代码高亮&lt;/li&gt;
&lt;li&gt;代码自动补全&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>如何在Linux和Windows上优雅地玩galgame</title>
        <link>https://star-hengxing.github.io/p/%E5%A6%82%E4%BD%95%E5%9C%A8linux%E5%92%8Cwindows%E4%B8%8A%E4%BC%98%E9%9B%85%E5%9C%B0%E7%8E%A9galgame/</link>
        <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E5%A6%82%E4%BD%95%E5%9C%A8linux%E5%92%8Cwindows%E4%B8%8A%E4%BC%98%E9%9B%85%E5%9C%B0%E7%8E%A9galgame/</guid>
        <description>&lt;h2 id=&#34;windows10&#34;&gt;Windows10&lt;/h2&gt;
&lt;p&gt;提高游戏分辨率 -&amp;gt; &lt;a class=&#34;link&#34; href=&#34;https://github.com/Blinue/Magpie&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Magpie&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;统计游戏时长兼启动器 -&amp;gt; &lt;a class=&#34;link&#34; href=&#34;https://github.com/Aixile/Etupirka&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Etupirka&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用手柄玩galgame -&amp;gt; &lt;a class=&#34;link&#34; href=&#34;https://store.steampowered.com/app/353370/Steam_Controller/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Steam Controller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在你获得了一个很好的体验，启动&lt;code&gt;Etupirka&lt;/code&gt;，然后选中想玩的galgame，绑定&lt;code&gt;Magpie&lt;/code&gt;的快捷键到手柄上，对游戏全屏，我一个Quick load，可以继续用手柄摇杆推线咯&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;p&gt;一个坏消息，大部分黄油开发者根本没想过Linux平台&lt;/p&gt;
&lt;p&gt;一个好消息，steam的&lt;code&gt;Proton&lt;/code&gt;可以帮助我们玩到Windows上的galgame(感谢V社)&lt;/p&gt;
&lt;p&gt;首先在Linux上下载steam，然后添加非steam游戏，游戏设置使用Proton，然后你就可以&lt;del&gt;启动游戏啦&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;但实际上只有少部分黄油能打开，就算能打开还一定会伴随bug&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能打开的游戏没见过能播放op&lt;/li&gt;
&lt;li&gt;传言有些游戏要对应Proton版本才能打开&lt;/li&gt;
&lt;li&gt;游戏能打开，但bug太致命完全打不了&lt;/li&gt;
&lt;li&gt;我超，汉化补丁能打开生肉却打不开，但我想全都要怎么办&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;游戏打不开怎么办，乱试一下吧&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;游戏路径全ascii且不留空格(游戏目录也算路径)&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blacksand.top/2021/08/25/%E8%AE%A9Galgame%E5%9C%A8ArchLinux%E9%80%9A%E8%BF%87Wine%E6%AD%A3%E7%A1%AE%E8%BF%90%E8%A1%8C&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考这篇文章&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;能用Proton直接打开基本无bug游玩是最好的，如果要折腾很久才能玩我觉得真的没必要，不如用回Windows或者虚拟机(两台以上电脑是Linux用户的最优解)&lt;/p&gt;
&lt;p&gt;先列个能打开的黄油名单在这吧，排排坑&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th&gt;Pronton版本&lt;/th&gt;
&lt;th&gt;体验&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;放課後シンデレラ&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;非常好，没遇到坑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;はつゆきさくら&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;播放序章op闪退了一次，再打开会提示你要不要播放op，能流畅游玩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;いきなりサキュバス ～いちゃらぶ搾精ライフ～&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;没完整打完，暂时无bug&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;白昼夢の青写真&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;黑屏bug，如果不是一直渲染的画面就会黑屏，比如显示文字的时候，文字外的全黑&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;有群友推荐&lt;code&gt;lutris&lt;/code&gt;和&lt;code&gt;proton-ge&lt;/code&gt;，还未研究&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Chinagraph2020会前课程 真实感图形渲染科研入门 随手记录</title>
        <link>https://star-hengxing.github.io/p/chinagraph2020%E4%BC%9A%E5%89%8D%E8%AF%BE%E7%A8%8B-%E7%9C%9F%E5%AE%9E%E6%84%9F%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%E7%A7%91%E7%A0%94%E5%85%A5%E9%97%A8-%E9%9A%8F%E6%89%8B%E8%AE%B0%E5%BD%95/</link>
        <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/chinagraph2020%E4%BC%9A%E5%89%8D%E8%AF%BE%E7%A8%8B-%E7%9C%9F%E5%AE%9E%E6%84%9F%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%E7%A7%91%E7%A0%94%E5%85%A5%E9%97%A8-%E9%9A%8F%E6%89%8B%E8%AE%B0%E5%BD%95/</guid>
        <description>&lt;p&gt;录播：&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1my4y1z76s&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Chinagraph2020&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;论文推荐&#34;&gt;论文推荐&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/267368385&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;真实感图形渲染科研入门笔记（一）：论文推荐&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;工具链与参考资料&#34;&gt;工具链与参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/268902385&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;真实感图形渲染科研入门笔记（二）：工具链与参考资料&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;迈向科研的训练&#34;&gt;迈向科研的训练&lt;/h2&gt;
&lt;h3 id=&#34;离线&#34;&gt;离线&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;用Intel的Embree写一个光线追踪器&lt;/li&gt;
&lt;li&gt;使用多重重要性采样&lt;/li&gt;
&lt;li&gt;支持微表面材质&lt;/li&gt;
&lt;li&gt;实现一个正确的BDPT&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;95%做渲染的科研人员都没写对BDPT(太难了)&lt;/p&gt;
&lt;p&gt;检验：和PT的结果比较&lt;/p&gt;
&lt;h3 id=&#34;实时&#34;&gt;实时&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;用C++封装OpenGL&lt;/li&gt;
&lt;li&gt;支持arcball(能用鼠标拖拽的一个球，里面的物体一起动起来)，写一个VSSM&lt;/li&gt;
&lt;li&gt;使用Optix和OpenGL实现RTRT&lt;/li&gt;
&lt;li&gt;使用SVGF降噪&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;未来&#34;&gt;未来&lt;/h2&gt;
&lt;p&gt;材质外观的研究才刚刚开始&lt;/p&gt;
&lt;p&gt;现在用的基本这两种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;diffuse + microfacet&lt;/li&gt;
&lt;li&gt;迪士尼原则BRDF&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尽管实现很简单，但第一种对真实感渲染错的离谱&lt;/p&gt;
&lt;p&gt;人脸的渲染也没有好的正向模型&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AUR打包记录</title>
        <link>https://star-hengxing.github.io/p/aur%E6%89%93%E5%8C%85%E8%AE%B0%E5%BD%95/</link>
        <pubDate>Wed, 02 Mar 2022 10:03:35 +0800</pubDate>
        
        <guid>https://star-hengxing.github.io/p/aur%E6%89%93%E5%8C%85%E8%AE%B0%E5%BD%95/</guid>
        <description>&lt;p&gt;当发现了一个好软件，但aur上没有人打包，这很难受，所以不如自己来为社区做贡献&lt;/p&gt;
&lt;p&gt;这次我打的包是一个appimage，理所当然去参考一些现有的appimage打包PKGBUILD&lt;/p&gt;
&lt;p&gt;所以先&lt;del&gt;设计再编码&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;pkgbulid编写&#34;&gt;PKGBULID编写&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载最新版本的软件到本地&lt;/li&gt;
&lt;li&gt;提取appimage，把软件icon放到/usr/share/icons&lt;/li&gt;
&lt;li&gt;制作Desktop Entry，放到/usr/share/applications&lt;/li&gt;
&lt;li&gt;最后将软件去掉版本号，安装到常见目录（我选择了放在/opt/appimages）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;是不是看起来很简单，但由于不熟悉linux和一些常用工具，一顿操作下来，花了半天才写好PKGBUILD。&lt;/p&gt;
&lt;p&gt;首先是学会用sed，因为appimage里自带了一个Desktop Entry，所以要进行修改。&lt;/p&gt;
&lt;p&gt;其次就是安装到目录的时候需要给权限目录权限，不然复制不进去。&lt;/p&gt;
&lt;p&gt;当上游的包没有checksum的时候，还要自己download到本地生成然后加上PKGBULID。当然makepkg然后给了个便利的命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 如果有上一个版本的checksum,先用sed删除再执行该命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; sed -i &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$d&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt; PKGBULID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; makepkg -g &amp;gt;&amp;gt; PKGBULID
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;测试&#34;&gt;测试&lt;/h2&gt;
&lt;p&gt;写好PKGBULID，检查能不能用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 检查PKGBUILD格式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;namcap PKGBUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 生成包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;makepkg -s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 检查包是否缺少依赖等等&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;namcap xxx.pkg.tar.zst
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查包的时候我弹了许多报错，不知道怎么修。然后我去用namcap检查一下我参考的那个appimage包，好家伙，他的报错跟我一样。既然他没修那我也就算了吧。&lt;/p&gt;
&lt;p&gt;然后尝试安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 生成.SRCINFO给aur仓库的页面展示，如果第一次提交没有生成，aur仓库会拒绝你的包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;makepkg -i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; makepkg --printsrcinfo &amp;gt; .SRCINFO
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;上传&#34;&gt;上传&lt;/h2&gt;
&lt;p&gt;如果一切没问题，那就可以用git上传aur了（需要一个aur帐号）。&lt;/p&gt;
&lt;p&gt;如果会基本的git操作，下面应该都明白怎么操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 为aur创建ssh key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch ~/.ssh/config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 写入这些&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host aur.archlinux.org
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IdentityFile ~/.ssh/aur
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    User aur
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 生成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-keygen -f ~/.ssh/aur
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 首先创建一个aur项目&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone ssh://aur@aur.archlinux.org/&amp;lt;你的包名字&amp;gt;.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add PKGBUILD .SRCINFO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;init v1.x.x&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;成功之后呢，你就可以尝试用&lt;code&gt;paru&lt;/code&gt;/&lt;code&gt;yay&lt;/code&gt;来下载了。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://junyussh.github.io/p/arch-linux-package-quick-start/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Arch Linux 第一次打包就上手&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>色彩搭配的基础知识</title>
        <link>https://star-hengxing.github.io/p/%E8%89%B2%E5%BD%A9%E6%90%AD%E9%85%8D%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Mon, 07 Feb 2022 15:25:20 +0800</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E8%89%B2%E5%BD%A9%E6%90%AD%E9%85%8D%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1t7411o79q/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;至今看过最棒的关于基础色彩理论的视频&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;常识&#34;&gt;常识&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;红色和黄色可以变成橙色;黄色和蓝色变成绿色;而蓝色和红色变成紫色。如果我们将这些颜色混合在一起，我们得到更多的色调，如红橙色和黄绿色。总之，它们形成了所谓的色轮。&lt;/li&gt;
&lt;li&gt;色调是最简单的，它基本上就是我们所说的“颜色”。&lt;/li&gt;
&lt;li&gt;饱和度是指强度，换句话说，颜色是否重叠更微妙，或者更具活力。&lt;/li&gt;
&lt;li&gt;色值与深浅的颜色相关，从黑到白。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;专业配色方案&#34;&gt;专业配色方案&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;最简单的方法是单色因为它仅使用一个颜色或色调，选择在色轮上挑选一个点，并使用饱和度和色值的知识，能够保证匹配。&lt;/li&gt;
&lt;li&gt;相似色搭配是使用色轮中彼此相邻的色彩样式，如红色和橙色、蓝色和绿色······&lt;/li&gt;
&lt;li&gt;互补色彼此相对，例如，蓝色和橙色&amp;hellip;或经典的红色和绿色。为了避免互补配色方案过于简单化可以增加更轻，更深，或者一些不同饱和度的颜色。&lt;/li&gt;
&lt;li&gt;分裂互补配色方案使用的相对颜色的双重配色，能够提升对比之外，更有趣的结果。&lt;/li&gt;
&lt;li&gt;三元配色方案采用三种均匀分布的颜色，在色轮上形成一个完美的三角形。这些组合的效果醒目，特别是与主色或辅色的运用。&lt;/li&gt;
&lt;li&gt;四元色搭配在色轮上形成了一个矩形，可以通过将其中的一个颜色用于主色，其余为辅色。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;色彩扎眼——选择一种颜色，并尝试调整其亮度，暗度或饱和度。&lt;/li&gt;
&lt;li&gt;色彩过多——也许一点点色彩就可以满足你的画面需要。&lt;/li&gt;
&lt;li&gt;色不平衡——中性颜色，如黑色，白色和灰色可以帮助您平衡画面。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;实际经验&#34;&gt;实际经验&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;每种颜色都会发出一个信息。考虑到项目的色调，并选择一个合理的配色方案。
&lt;ul&gt;
&lt;li&gt;明亮的颜色往往能够带来有趣或现代感的效果。&lt;/li&gt;
&lt;li&gt;低饱和度的色彩搭配经常会受到商业公司的喜爱。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你可以在各种有趣的地方找到配色方案，比如某些广告、艺术品、配色网站、周围世界，颜色无处不在。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>御宅族与ChaosChild症候群</title>
        <link>https://star-hengxing.github.io/p/%E5%BE%A1%E5%AE%85%E6%97%8F%E4%B8%8Echaoschild%E7%97%87%E5%80%99%E7%BE%A4/</link>
        <pubDate>Mon, 07 Feb 2022 13:08:04 +0800</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E5%BE%A1%E5%AE%85%E6%97%8F%E4%B8%8Echaoschild%E7%97%87%E5%80%99%E7%BE%A4/</guid>
        <description>&lt;p&gt;重新排版了一下&lt;/p&gt;
&lt;p&gt;出处：
御宅族与ChaosChild症候群 - 历久弥新的文章 - 知乎
&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/44592537&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/44592537&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;御宅族已死。&lt;br&gt;
&amp;ndash;冈田斗司夫&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;真正的御宅族如今是否已经消亡了？我没有相关的数据情报，所以无法作出回答。然而，在我的臆测中，真正的御宅族还存在着，但不过只是很少的一部分，并且这部分人中并没有关联。
所以，在新世代宅的急速涌入下不断被稀释着。&lt;/p&gt;
&lt;p&gt;我也自认为真正的御宅族，然而在我全通了CHAOS;CHILD后，发觉我也不过是“ChaosChild症候群”的一员罢了。&lt;/p&gt;
&lt;h2 id=&#34;逃避性&#34;&gt;逃避性&lt;/h2&gt;
&lt;p&gt;无论是真正御宅族们，还是新世代的御宅族们，虽然是不同的个体，但是却进行着妄想同步。得益于网络的普及，御宅们把本我至于同一个巨大的名为御宅文化的妄想之中（网络未普及之前已经开始，不过那时候只是小型的妄想体，朋友、学校的讨论，电视活动之类）。
美好的妄想，它与严酷的现实有着天壤之别，为了生存不得不经历人世，但是，本我还有御宅文化这个桃花源，经过学习、工作的洗礼后，坐到电脑或是沙发前，打开动画亦或是游戏，全身心的投入。&lt;/p&gt;
&lt;p&gt;大部分的人玩游戏的时候有个特点，对于外界置若罔闻，仿佛所有感官都集中在了游戏上，而这在做其他事情的时候是很少出现的，而且并不是可以人为控制的现象。
全身心的投入妄想之中，大脑分泌刺激性神经递质，所有其他事情烦恼都被抛在脑后，此时，仿佛就是游戏中的人物。
放松，就像是在逃避，而这并没有错，我们无时无刻不想着逃避，而超我却告诉我们不行，现在并不是共产主义社会。最后，我们只得在苦劳与逃避之间无限循环。&lt;/p&gt;
&lt;p&gt;有的人为自己创造虚伪的现实妄想，沉溺其中，彻底的利己主义，而这你又得到了什么呢？也许你可能得到你想要的，而这个世界却更加崩坏。当然，利己主义者不会考虑这些，只会考虑自己能否享乐。&lt;/p&gt;
&lt;h2 id=&#34;优越性&#34;&gt;优越性&lt;/h2&gt;
&lt;p&gt;宅文化的一些特性加上事件误导，使得它天生作为一种非主流道德亚文化，被一般人所不适，因为历史原因在我国更是如此。&lt;/p&gt;
&lt;p&gt;所以宅这个ChaosChild症候群群体，天生是活在一个被一般人所蔑视的妄想中，因主流文化使得宅文化变成了自卑性的妄想，而对此宅们当然要作出应激反应。
以前，所谓的真正御宅族，用各式各样，各个门类的创作证明着自身的能力性，并与社会相关联，这样，不仅在宅圈收获了虚荣并且证明给社会人自己比他们还要强。
如果是什么都不会且自控力低下不去学的人，通常情况类似宫代拓留，自诩为情报强者，在宅圈混迹获得大量情报，自以为看透了世界的真实，看不起周围的普通人，甚至包括父母，认为他们的情报量太少，包括我也是此类。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;你们这些人天天就是看这些无脑电视剧，追星，看着无聊的花边新闻，全是萌二的B站，一遍遍刷着全是垃圾信息的微博，呵，这个人还在煞有其事地看知乎啊，知乎早就和微博没区别了，哈哈，你们这些情报弱者。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;而我不同，我刚通了CHAOS；CHILD，你们这些人一辈子也接触不到这个神作吧，呵呵，通过这个游戏，我知道了……而你们就这样浑浑噩噩地活着吧，我早已看穿一切。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;而新世代宅更加常用的是自嘲的手法，死宅真恶心、肥宅快乐……在疯狂地传播下无形间降低这些词的伤害力，并成为一种调侃娱乐。
真是可笑的手法呢，本身含着自卑的群体夺取外部人的武器抢先自行使用，而造成外部人无枪可打，同时加深内部的归属感使原本那些刺耳的话也只成为了笑料……&lt;/p&gt;
&lt;p&gt;我与宫代拓留有着许多相似之处，不健全的家庭环境，把自己放入妄想中，吸收大量情报，在学校，身为班级下层的我却看不起班级上层的学生，找的理由和宫代差不多，进入工作后依然是如此状态，在公司，交际能力极差导致也没有人愿意主动交谈，每天中午在食堂都是一个人吃午餐，而我，却觉得这样很轻松。&lt;/p&gt;
&lt;p&gt;看着周围有说有笑的人们，情报强者这个武器还真是好用呢，每天使用它来填补自己的自尊心，回到家再次沉溺在妄想之中。&lt;/p&gt;
&lt;h2 id=&#34;矛盾性&#34;&gt;矛盾性&lt;/h2&gt;
&lt;p&gt;几个人的御宅妄想无法抵抗这个社会的压力与反对，而一大群人妄想就可以做到。作为这个妄想的每个终端，每个人把自己置于其中就可以感受到整体的包容，从而抵抗外部的侵犯。
回到家，打开电脑，进入一些网站或者社交软件，看着御宅相关的东西，购买周边，放置手办，感觉安心了，此刻，我作为子体感受到了母体的包容性。即使外面的人反对御宅文化本身，因为这个妄想内部人的数量足够庞大，个体也不会慌乱，因为我们人数众多。
矛盾的是，作为处于同一个妄想下的我们，也如One World Order实验一样，自个划分起阶级。我们共同构建起名为御宅文化的妄想，然后并不是同伴，我们只是都在汲取它而已。
具体表现之一，讽刺B站，看不惯B站小学生，认为B站已经变质，却还总是上B站。其原因在于只有B站能提供足够的妄想力。
其实所谓的真正御宅也在享受着新世代宅的恩惠，新世代宅的急流涌入增大着妄想圈，不过这样也伴随着大量的副作用。这些副作用改变了御宅妄想的形态，与真正御宅一直一来所容纳自己的妄想形态产生了变异，真正御宅因妄想的变异而发生不适，所以必须要嘲讽新世代来缓解。
并且，嘲讽新世代宅还能使用优越感这个武器填补自己的自尊心。
御宅妄想的变异越严重，对于真正御宅的压力就愈发高涨，这种压力会转变为各种行为，但这些行为基本脱离不了对于新世代御宅的嘲讽与虚荣，并且企图能有另外一些真正御宅，不，不管什么人，只要能回复支持自己就行了，这样妄想不同步产生的压力就能减轻。&lt;/p&gt;
&lt;p&gt;而御宅文化妄想的变异是不可逆的，如今只有两种选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;适应不断变化的妄想，仍然沉溺其中。&lt;/li&gt;
&lt;li&gt;脱离妄想。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而这点不只是本人的抉择，而是和每个人的经历相关，有时候轮不到你自由选择，生活会主动帮你进行选择。&lt;/p&gt;
&lt;p&gt;一般来说，第二种选择脱离妄想符合绝大部分人的现实情况，也符合社会主流文化的诉求，被社会所绑架的所有人也会觉得这是合理的，应该的，是一种必经阶段。&lt;/p&gt;
&lt;p&gt;而我可能不会这样，如同沉迷游戏的孩子不是教训孩子而是需要从家庭与父母入手解决一样，我明白我作出这样的选择是因为我家庭的不健全所导致的，并没有、也无法像正常家庭的孩子一般，按流程走人生，所以我可能会一直停留在妄想之中。&lt;/p&gt;
&lt;p&gt;哪个选项比较好？从社会来说，必然是第二种：&lt;/p&gt;
&lt;p&gt;第一种选项意味着逃避、自卑、矛盾。而第二种意味着面对、自信、成长。&lt;/p&gt;
&lt;p&gt;这是对于社会人来说，显而易见的答案。&lt;/p&gt;
&lt;p&gt;我难道不明白吗？怎么可能？但是我为什么不选第二种，是因为懦弱？逃避？也许是这样吧。&lt;/p&gt;
&lt;p&gt;但是我啊，总是有一种感觉，选了第二种答案就会失去一些什么……&lt;/p&gt;
&lt;p&gt;你们会如何选择呢？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ARK Survival Evolved 开启活动的命令行参数</title>
        <link>https://star-hengxing.github.io/p/ark-survival-evolved-%E5%BC%80%E5%90%AF%E6%B4%BB%E5%8A%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</link>
        <pubDate>Fri, 04 Feb 2022 13:33:27 +0800</pubDate>
        
        <guid>https://star-hengxing.github.io/p/ark-survival-evolved-%E5%BC%80%E5%90%AF%E6%B4%BB%E5%8A%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</guid>
        <description>&lt;h2 id=&#34;enable-ark-survival-evolved-events&#34;&gt;Enable ARK: Survival Evolved Events&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -activeevent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;EventName
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;list-of-ark-events&#34;&gt;List of ARK Events&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Active event&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Love Evolved&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-activeevent=vday&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Eggcelect Adventure&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-activeevent=Easter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Anniversary&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-activeevent=birthday&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Summer Bash&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-activeevent=Summer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Fear Evolved&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-activeevent=FearEvolved&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Turkey Trial&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-activeevent=TurkeyTrial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Winter Wonderland&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-activeevent=WinterWonderland&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>当你第一次和日本人交流</title>
        <link>https://star-hengxing.github.io/p/%E5%BD%93%E4%BD%A0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%92%8C%E6%97%A5%E6%9C%AC%E4%BA%BA%E4%BA%A4%E6%B5%81/</link>
        <pubDate>Sun, 30 Jan 2022 14:26:50 +0800</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E5%BD%93%E4%BD%A0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%92%8C%E6%97%A5%E6%9C%AC%E4%BA%BA%E4%BA%A4%E6%B5%81/</guid>
        <description>&lt;p&gt;务必以下三连&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;大変申し訳ございません&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;突然フォローで失礼ですが&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;この度は,大変ご迷惑をおかけして誠に申し訳ございませんでした。ご無礼のありました段、重ねて謹んでお詫び申し上げます。今後このようなことのありませんよう誠心誠意努力して参りますので、これからもご贔屓賜りますよう重ねて宜しくお願い申し上げます&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>随手记的乐理知识</title>
        <link>https://star-hengxing.github.io/p/%E9%9A%8F%E6%89%8B%E8%AE%B0%E7%9A%84%E4%B9%90%E7%90%86%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Sun, 30 Jan 2022 11:25:23 +0800</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E9%9A%8F%E6%89%8B%E8%AE%B0%E7%9A%84%E4%B9%90%E7%90%86%E7%9F%A5%E8%AF%86/</guid>
        <description>&lt;h2 id=&#34;音程interval&#34;&gt;音程（Interval）&lt;/h2&gt;
&lt;p&gt;两个音高不同的音在一起会形成音程。一个音到下一个&lt;strong&gt;相邻&lt;/strong&gt;的音的距离叫&lt;strong&gt;二度（second）&lt;/strong&gt;。如果距离是半音，音程叫小二度（m2）；全音就叫大二度（M2）&lt;/p&gt;
&lt;p&gt;单位&lt;strong&gt;度&lt;/strong&gt;作为音程的冲量单位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;旋律（Melodic） -&amp;gt; 两个音一前一后发声&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;和声（Harmonic） -&amp;gt; 多个音同时发声&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;和弦chord&#34;&gt;和弦（chord）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;同时发声的音&lt;/strong&gt; &amp;gt;= 3 就叫&lt;strong&gt;和弦&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;精通乐理不是梦：超简单的乐理学习图解版&lt;/li&gt;
&lt;li&gt;认识乐理：视唱练耳同步学&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>AppImage的使用</title>
        <link>https://star-hengxing.github.io/p/appimage%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/appimage%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;h2 id=&#34;run&#34;&gt;Run&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; /path/to/AppImage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chmod +x xxx.AppImage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ./xxx.AppImage
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;extra-icon&#34;&gt;Extra icon&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ./xxx.AppImage --appimage-extract
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;desktop-entry&#34;&gt;Desktop Entry&lt;/h2&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;Desktop Entry&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Version&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;1.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;Application
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Comment&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;A cross platform comic client.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Exec&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;/home/&amp;lt;user&amp;gt;/Desktop/AppImages/xxx.AppImage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Icon&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;/home/&amp;lt;user&amp;gt;/Desktop/AppImages/icons/xxx.png
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Terminal&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;Game
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    X-AppImage-Version&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# Copy the content to xxx.desktop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mkdir -p ~/.local/share/applications
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    touch ~/.local/share/applications/xxx.desktop
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux配置</title>
        <link>https://star-hengxing.github.io/p/linux%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/linux%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;h2 id=&#34;基本软件&#34;&gt;基本软件&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;工具&lt;/th&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;display manager&lt;/td&gt;
&lt;td&gt;lightdm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;desktop environment&lt;/td&gt;
&lt;td&gt;xfce4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文本编辑器&lt;/td&gt;
&lt;td&gt;vscode/vim/emacs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;程序启动器&lt;/td&gt;
&lt;td&gt;rofi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输入法&lt;/td&gt;
&lt;td&gt;fcitx5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;browser&lt;/td&gt;
&lt;td&gt;microsoft-edge-dev(AUR)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多线程下载&lt;/td&gt;
&lt;td&gt;aria2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;压缩包解压/查看&lt;/td&gt;
&lt;td&gt;ark&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;proxy&lt;/td&gt;
&lt;td&gt;clash for window(AUR)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RSS&lt;/td&gt;
&lt;td&gt;fluent-reader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shell&lt;/td&gt;
&lt;td&gt;zsh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PDF&lt;/td&gt;
&lt;td&gt;zathura&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;命令行软件&#34;&gt;命令行软件&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;显示目录大小&lt;/td&gt;
&lt;td&gt;ncdu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高级版top&lt;/td&gt;
&lt;td&gt;gotop(AUR)/htop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;打印彩色的十六进制&lt;/td&gt;
&lt;td&gt;hexyl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;语法高亮和行号的cat+less&lt;/td&gt;
&lt;td&gt;bat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;统计目录代码量&lt;/td&gt;
&lt;td&gt;loc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件浏览器&lt;/td&gt;
&lt;td&gt;ranger&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;比tmux更好用的单窗口多终端&lt;/td&gt;
&lt;td&gt;zellij&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;新建用户&#34;&gt;新建用户&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    useradd -m -G wheel username
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    passwd username
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ln -s /usr/bin/vim /usr/bin/vi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    visudo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找到&lt;code&gt;# %wheel ALL=(ALL)ALL&lt;/code&gt;取消注释&lt;/p&gt;
&lt;h2 id=&#34;硬件&#34;&gt;硬件&lt;/h2&gt;
&lt;h3 id=&#34;网卡&#34;&gt;网卡&lt;/h3&gt;
&lt;p&gt;万物起源先上网，但有些网卡需要手动装驱动(比如我笔记本的博通网卡)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo pacman -S linux-headers broadcom-wl-dkms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    reboot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dkms status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;声卡&#34;&gt;声卡&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo pacman -S alsa-utils pulseaudio-alsa
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;蓝牙&#34;&gt;蓝牙&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo pacman -S bluez bluez-utils
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /etc/bluetooth/main.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;Policy&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;AutoEnable&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 开机自启&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;联网&#34;&gt;联网&lt;/h2&gt;
&lt;p&gt;启动之前安装的&lt;a class=&#34;link&#34; href=&#34;https://wiki.archlinux.org/title/NetworkManager&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NetworkManager&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    systemctl &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enable&lt;/span&gt; NetworkManager
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;图形界面&#34;&gt;图形界面&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo pacman -S xf86-video-intel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo pacman -S xorg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo pacman -S xfce4 xfce4-goodies
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo pacman -S lightdm lightdm-gtk-greeter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo systemctl &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enable&lt;/span&gt; lightdm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;aur&#34;&gt;AUR&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo pacman -S paru 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;bash&#34;&gt;bash&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo pacman -S zsh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo chsh -s /bin/zsh username
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;中文字体输入法&#34;&gt;中文字体/输入法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-rime
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;下载&#34;&gt;下载&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo pacman -S aria2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# web前端(还有很多前端可供挑选)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    paru ariang-allinone
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# copy 大佬的配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    git clone https://github.com/P3TERX/aria2.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mkdir ~/.aria2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mv aria2.conf ~/.aria2/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    touch ~/.aria2/aria2.session
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;看aria2.conf注释配置路径&lt;/li&gt;
&lt;li&gt;看&lt;a class=&#34;link&#34; href=&#34;https://wiki.archlinux.org/title/Aria2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wiki&lt;/a&gt;配置开机自启&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://archlinuxstudio.github.io/ArchLinuxTutorial/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Arch Linux 安装使用教程 - ArchTutorial - Arch Linux Studio &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>基于SDF的Raymarching</title>
        <link>https://star-hengxing.github.io/p/%E5%9F%BA%E4%BA%8Esdf%E7%9A%84raymarching/</link>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E5%9F%BA%E4%BA%8Esdf%E7%9A%84raymarching/</guid>
        <description>&lt;p&gt;其实大部分情况下和raytracing类似&lt;/p&gt;
&lt;p&gt;不同:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;几何物体的描述&lt;/li&gt;
&lt;li&gt;光线与几何物体求交&lt;/li&gt;
&lt;li&gt;法线的获取&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.iquilezles.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iq大佬的网站&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>逆向工程</title>
        <link>https://star-hengxing.github.io/p/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</link>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</guid>
        <description>&lt;p&gt;自学怎么说呢，我也在摸索，不过我认为先做一下CSAPP的bomb lab比较好&lt;/p&gt;
&lt;h2 id=&#34;bomb-lab&#34;&gt;bomb lab&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;逆向汇编破解程序&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个作业怎么下载还有工具自己找吧，都很容易获取&lt;/p&gt;
&lt;p&gt;可能要用到的东西&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gdb&lt;/li&gt;
&lt;li&gt;x86指令文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我研究的时候是边做边学，打断点，单步看汇编，不懂的指令/寄存器现场查&lt;/p&gt;
&lt;h2 id=&#34;tools&#34;&gt;tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;强大的工具
&lt;ul&gt;
&lt;li&gt;ghidra&lt;/li&gt;
&lt;li&gt;ida&lt;/li&gt;
&lt;li&gt;gdb&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;十六进制编辑器
&lt;ul&gt;
&lt;li&gt;bless&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;十六进制查看
&lt;ul&gt;
&lt;li&gt;hexyl(跨平台/终端彩色输出)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解包
&lt;ul&gt;
&lt;li&gt;arc_unpacker&lt;/li&gt;
&lt;li&gt;crass&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://jay-dh.github.io/blog/reverse-engineering-summary&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;逆向工程入门简述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://jay-dh.github.io/blog/reverse-engineering-asm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;汇编语言简述(逆向工程)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>使用Synapse自建聊天服务器</title>
        <link>https://star-hengxing.github.io/p/%E4%BD%BF%E7%94%A8synapse%E8%87%AA%E5%BB%BA%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E4%BD%BF%E7%94%A8synapse%E8%87%AA%E5%BB%BA%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
        <description>&lt;p&gt;我的系统是ArchLinux，所以看着archwiki一路配置比较舒服&lt;/p&gt;
&lt;p&gt;其他系统请看&lt;a class=&#34;link&#34; href=&#34;https://matrix-org.github.io/synapse/latest/setup/installation.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;从安装到启动&#34;&gt;从安装到启动&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;my.domain.name&lt;/strong&gt;替换成自己的域名就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; /var/lib/synapse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo -u synapse python -m synapse.app.homeserver &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    --server-name my.domain.name &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    --config-path /etc/synapse/homeserver.yaml &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    --generate-config &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    --report-stats&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;yes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo systemctl start synapse.service
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务器至少要有一个用户&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    register_new_matrix_user -c /etc/synapse/homeserver.yaml http://127.0.0.1:8008
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候应该就可以用一个matrix client来连接了，这里选择element&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用命令行工具下载在线视频</title>
        <link>https://star-hengxing.github.io/p/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%B8%8B%E8%BD%BD%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91/</link>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%B8%8B%E8%BD%BD%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91/</guid>
        <description>&lt;h2 id=&#34;yt-dlp&#34;&gt;yt-dlp&lt;/h2&gt;
&lt;p&gt;一个命令行下载youtube视频软件，目前来说就他下载速度还行，其他同类工具被限速了&lt;/p&gt;
&lt;p&gt;TL;DR&lt;/p&gt;
&lt;p&gt;下载一个视频&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    yt-dlp URL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不下载，查看视频下载的信息(选择画质)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    yt-dlp -F URL
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;BiliBili&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; 12Q4y1S73g: Downloading webpage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;BiliBili&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; 12Q4y1S73g: Downloading video info page
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;info&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; Available formats &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; 12Q4y1S73g:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    format code  extension  resolution note
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;            flv        unknown    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;            flv        unknown    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;            flv        unknown    295.77MiB &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;best&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;下载bilibili视频&#34;&gt;下载bilibili视频&lt;/h2&gt;
&lt;p&gt;Bilibili Evolved + aria2 下载视频&lt;/p&gt;
&lt;p&gt;Bilibili Evolved提供了几种视频下载方式，我这里选择aria2&lt;/p&gt;
&lt;p&gt;启动aria2后，在插件里选择aria2 rpc就可以自动下载视频了&lt;/p&gt;
</description>
        </item>
        <item>
        <title>小知识</title>
        <link>https://star-hengxing.github.io/p/%E5%B0%8F%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E5%B0%8F%E7%9F%A5%E8%AF%86/</guid>
        <description>&lt;h2 id=&#34;编年史和纪传体&#34;&gt;编年史和纪传体&lt;/h2&gt;
&lt;p&gt;编年史:&lt;/p&gt;
&lt;p&gt;15年你，你表哥，你表妹做了哪些事情&lt;/p&gt;
&lt;p&gt;16年你，你表哥，你表妹做了哪些事情&lt;/p&gt;
&lt;p&gt;。。。。。&lt;/p&gt;
&lt;p&gt;N年你，你表哥，你表妹做了哪些事情&lt;/p&gt;
&lt;p&gt;记传使：&lt;/p&gt;
&lt;p&gt;15-N年，你做了什么事情&lt;/p&gt;
&lt;p&gt;15-N年，你表哥做了什么事情&lt;/p&gt;
&lt;p&gt;15-N年，你表妹做了什么事情&lt;/p&gt;
&lt;p&gt;小结，比喻不准确。&lt;/p&gt;
&lt;h2 id=&#34;断网时谷歌浏览器小游戏&#34;&gt;断网时谷歌浏览器小游戏&lt;/h2&gt;
&lt;p&gt;谷歌浏览器输入&lt;strong&gt;chrome://dino/&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter&lt;/strong&gt;后按&lt;strong&gt;空格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就有个小游戏玩了&lt;/p&gt;
&lt;p&gt;甚至还有人用js写了个外挂&lt;/p&gt;
&lt;h2 id=&#34;乱数假文&#34;&gt;乱数假文&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Lorem ipsum，中文又称“乱数假文”，是指一篇常用于排版设计领域的拉丁文文章，主要的目的为测试文章或文字在不同字型、版型下看起来的效果，通常网站还没建设好时会出现这段字
-来自百度&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;科普&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1GK411J7YL?t=553&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【木鱼说129】如果你网龄够长，一定看过这张图——从「乱数假文」到「互联网第一夫人」知识科学科普&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;sex-english-words&#34;&gt;sex English words&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cunnilingus&lt;/li&gt;
&lt;li&gt;paedophilia&lt;/li&gt;
&lt;li&gt;pspanking&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>圆内接正多边形的面积</title>
        <link>https://star-hengxing.github.io/p/%E5%9C%86%E5%86%85%E6%8E%A5%E6%AD%A3%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%9A%84%E9%9D%A2%E7%A7%AF/</link>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E5%9C%86%E5%86%85%E6%8E%A5%E6%AD%A3%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%9A%84%E9%9D%A2%E7%A7%AF/</guid>
        <description>&lt;h1 id=&#34;圆内接正多边形的面积&#34;&gt;圆内接正多边形的面积&lt;/h1&gt;
&lt;p&gt;假设半径为R，正多边形顶点数为n&lt;/p&gt;
&lt;p&gt;正多边形外接圆，圆和正多边形中心点为同一位置&lt;/p&gt;
&lt;p&gt;将中心点对每个角连线，生成n个等腰三角形，腰长等于半径&lt;/p&gt;
&lt;p&gt;求出单个三角形面积，再乘以三角形数量&lt;/p&gt;
&lt;p&gt;$$
S = \frac{nR^{2}sin(\frac{2\pi}{n})}{2}
$$&lt;/p&gt;
</description>
        </item>
        <item>
        <title>一个函数打印STL容器</title>
        <link>https://star-hengxing.github.io/p/%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E6%89%93%E5%8D%B0stl%E5%AE%B9%E5%99%A8/</link>
        <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E6%89%93%E5%8D%B0stl%E5%AE%B9%E5%99%A8/</guid>
        <description>&lt;p&gt;满足range这个concept就可以使用该函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;ranges&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;range T&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; println(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;v&lt;/span&gt; : args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;ranges&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;range... Ts&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; print(Ts... args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (println(args), ...);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; arr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;iota(arr.begin(), arr.end(), &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; vec(&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;iota(vec.begin(), vec.end(), &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(arr, vec);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 1 2 3 4 5 6 7 8 9
-10 -9 -8 -7 -6 -5 -4 -3 -2 -1
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>裸机运行Hello world</title>
        <link>https://star-hengxing.github.io/p/%E8%A3%B8%E6%9C%BA%E8%BF%90%E8%A1%8Chello-world/</link>
        <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E8%A3%B8%E6%9C%BA%E8%BF%90%E8%A1%8Chello-world/</guid>
        <description>&lt;h2 id=&#34;前置知识&#34;&gt;前置知识&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编译链接到可执行程序一系列流程&lt;/li&gt;
&lt;li&gt;x86架构的一些寄存器&lt;/li&gt;
&lt;li&gt;elf头&lt;/li&gt;
&lt;li&gt;下面工具的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;环境配置&#34;&gt;环境配置&lt;/h2&gt;
&lt;p&gt;os: Linux&lt;/p&gt;
&lt;p&gt;可能会用到的工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc(编译)&lt;/li&gt;
&lt;li&gt;ld(链接)&lt;/li&gt;
&lt;li&gt;objcopy(提取二进制)&lt;/li&gt;
&lt;li&gt;dd(写入虚拟镜像)&lt;/li&gt;
&lt;li&gt;gdb(调试)&lt;/li&gt;
&lt;li&gt;make(自动化构建)&lt;/li&gt;
&lt;li&gt;qemu(虚拟机)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分linux发行版都会自带大部分工具，自行安装最新版本即可&lt;/p&gt;
&lt;h2 id=&#34;基本介绍&#34;&gt;基本介绍&lt;/h2&gt;
&lt;p&gt;目标是实现一个不依赖操作系统就能运行的二进制程序，在虚拟机屏幕显示hello world&lt;/p&gt;
&lt;p&gt;计算机启动，按下电源开关通电启动bios，检查硬件，没啥问题的话，bios会加载该储存设备第一个扇区的512字节(MBR)到物理内存0x7C00&lt;/p&gt;
&lt;p&gt;如果扇区最后两个字节是0x55和0xAA，那么说明是启动设备，否则bios会跳过该扇区&lt;/p&gt;
&lt;p&gt;如果装过系统的话，会发现这就是BIOS+MBR传统启动计算机方式，而现在比较“先进”的方式是UEFI启动&lt;/p&gt;
&lt;p&gt;最后bios使用命令jmp 0x7c00跳到我们代码，我们旅程就这样开始了&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;h3 id=&#34;coding&#34;&gt;coding&lt;/h3&gt;
&lt;p&gt;汇编大体上两种语法，intel和AT&amp;amp;T，这里选择AT&amp;amp;T，如果是用intel语法，可以去找nasm等汇编器编译&lt;/p&gt;
&lt;p&gt;附上两个伪指令，表明是16位代码和程序开头在main&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.globl main
.code16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后设置段寄存器为零，异或清零是常用的手法。为什么要清零，因为此时cpu在实模式下(real mode)，物理内存寻址是采用 段：偏移，计算方式如下&lt;/p&gt;
&lt;p&gt;物理地址 = 段 * 16 + 偏移&lt;/p&gt;
&lt;p&gt;如果我们直接设零，那么偏移量直接等于物理地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xorw %ax, %ax
movw %ax, %ds
movw %ax, %es
movw %ax, %ss
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为现代操作系统是分页管理内存，段管理内存已经不再使用，但有时候他会以某种方式出现我们眼前&lt;/p&gt;
&lt;p&gt;比如：平时写C/C++程序遇到的&lt;em&gt;Segmentation fault&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如何在屏幕上输出字符串呢，答案是使用bios中断&lt;/p&gt;
&lt;p&gt;bios中断没必要深究，当成api使用即可，使用方法就是在指定寄存器赋值，然后使用&lt;strong&gt;int&lt;/strong&gt;指令和对应中断号&lt;/p&gt;
&lt;p&gt;这里看&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/INT_10H&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;0x10中断指令&lt;/a&gt;的用法&lt;/p&gt;
&lt;p&gt;中断返回后，可以看到字符串按照我们的格式输出在屏幕上&lt;/p&gt;
&lt;h3 id=&#34;编译&#34;&gt;编译&lt;/h3&gt;
&lt;p&gt;这里我们使用make来管理编译流程&lt;/p&gt;
&lt;p&gt;gcc/ld/objcopy/dd等使用方法参考我的makefile&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译汇编源文件为.o文件&lt;/li&gt;
&lt;li&gt;指定程序入口函数和地址，链接成elf文件&lt;/li&gt;
&lt;li&gt;将elf文件中代码和数据提取成纯二进制文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后使用dd拼接512字节的MBR&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成全为零的512字节文件&lt;/li&gt;
&lt;li&gt;开头刻录我们的二进制文件&lt;/li&gt;
&lt;li&gt;最后两个字节刻录魔数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里使用其他工具或python脚本也可以完成&lt;/p&gt;
&lt;h3 id=&#34;运行&#34;&gt;运行&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;qemu-system-x86_64 -no-shutdown -no-reboot -m 128M -hda &amp;lt;你的镜像&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;debug&#34;&gt;debug&lt;/h3&gt;
&lt;p&gt;加上debug参数的启动命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qemu-system-x86_64 -S -s -no-shutdown -no-reboot -m 128M -hda &amp;lt;你的镜像&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gdb脚本解读：设置架构-远程链接虚拟机-debug文件-在main函数打断点-显示汇编和寄存器-运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set architecture i386:x86-64

target remote:1234

file build/debug/hello.elf

break main
layout asm
layout regs

continue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用gdb脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gdb -q -x kernel.gdbinit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入si执行单条汇编指令，观察寄存器变化&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/INT_10H&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;INT 10H&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.amd.com/resources/developer-guides-manuals/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AMD64 Architecture Programmer’s Manual Volume 3: General Purpose and System Instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>galgame游玩记录</title>
        <link>https://star-hengxing.github.io/p/galgame%E6%B8%B8%E7%8E%A9%E8%AE%B0%E5%BD%95/</link>
        <pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/galgame%E6%B8%B8%E7%8E%A9%E8%AE%B0%E5%BD%95/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;部分游戏没有全通&lt;/li&gt;
&lt;li&gt;有些gal没有吐槽&lt;/li&gt;
&lt;li&gt;系列作品会合在一起&lt;/li&gt;
&lt;li&gt;没有汉化 tag 的默认是生肉&lt;/li&gt;
&lt;li&gt;内有剧透（&lt;del&gt;这不是废话么&lt;/del&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;オモカゲ-えっちなハプニング-なんでもどんとこい&#34;&gt;オモカゲ ～えっちなハプニング!? なんでもどんとこい!～&lt;/h2&gt;
&lt;p&gt;译名：思影&lt;/p&gt;
&lt;p&gt;会社：あかべぇそふとすりぃ&lt;/p&gt;
&lt;p&gt;Tag：汉化 萌拔 幼驯染 后宫&lt;/p&gt;
&lt;h2 id=&#34;空の青と白と瞬きの夏&#34;&gt;空の青と白と／瞬きの夏&lt;/h2&gt;
&lt;p&gt;译名：天空的蓝与白/如梭夏日&lt;/p&gt;
&lt;p&gt;会社：バリスタラボ&lt;/p&gt;
&lt;p&gt;Tag：汉化 废萌&lt;/p&gt;
&lt;h2 id=&#34;輪舞曲duo--夜明けのフォルテシモ--ぷにゅぷりff&#34;&gt;輪舞曲Duo -夜明けのフォルテシモ- ぷにゅぷりff&lt;/h2&gt;
&lt;p&gt;译名：天空的蓝与白/如梭夏日&lt;/p&gt;
&lt;p&gt;会社：ティンクルベル&lt;/p&gt;
&lt;p&gt;Tag：汉化 百合 扶她 拔作&lt;/p&gt;
&lt;h2 id=&#34;神採りアルケミーマイスター&#34;&gt;神採りアルケミーマイスター&lt;/h2&gt;
&lt;p&gt;译名：神采炼金大师&lt;/p&gt;
&lt;p&gt;会社：エウシュリー&lt;/p&gt;
&lt;p&gt;Tag：汉化 SLG 后宫&lt;/p&gt;
&lt;h2 id=&#34;放課後シンデレラ２&#34;&gt;放課後シンデレラ２&lt;/h2&gt;
&lt;p&gt;译名：放学后的灰姑娘2&lt;/p&gt;
&lt;p&gt;会社：HOOKSOFT&lt;/p&gt;
&lt;p&gt;Tag：废萌&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;共通日常可以，个人线没对上胃口&lt;/p&gt;
&lt;h2 id=&#34;終わる世界とバースデイ&#34;&gt;終わる世界とバースデイ&lt;/h2&gt;
&lt;p&gt;译名：世界末日和生日&lt;/p&gt;
&lt;p&gt;会社：コットンソフト&lt;/p&gt;
&lt;p&gt;Tag：科幻 悬疑 妹系 泣系 猎奇&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;演出神作，尽管推完的那天并不是自己的生日，还是被感动到哭了&lt;/p&gt;
&lt;h2 id=&#34;穢翼のユースティア&#34;&gt;穢翼のユースティア&lt;/h2&gt;
&lt;p&gt;译名：秽翼的尤斯蒂娅&lt;/p&gt;
&lt;p&gt;会社：オーガスト&lt;/p&gt;
&lt;p&gt;Tag：汉化 奇幻&lt;/p&gt;
&lt;h2 id=&#34;island&#34;&gt;ISLAND&lt;/h2&gt;
&lt;p&gt;会社：Front Wing&lt;/p&gt;
&lt;p&gt;Tag：汉化 科幻 悬疑&lt;/p&gt;
&lt;h2 id=&#34;シロナガス島への帰還&#34;&gt;シロナガス島への帰還&lt;/h2&gt;
&lt;p&gt;译名：重返蓝鲸岛&lt;/p&gt;
&lt;p&gt;会社：旅の道&lt;/p&gt;
&lt;p&gt;Tag：汉化 恐怖 悬疑 馆系&lt;/p&gt;
&lt;h2 id=&#34;ふゆからくるる&#34;&gt;ふゆから、くるる&lt;/h2&gt;
&lt;p&gt;译名：冬旅，方冥冥&lt;/p&gt;
&lt;p&gt;会社：シルキーズプラス&lt;/p&gt;
&lt;p&gt;Tag：汉化 科幻 悬疑 百合 扶她&lt;/p&gt;
&lt;h2 id=&#34;時計仕掛けのレイライン&#34;&gt;時計仕掛けのレイライン&lt;/h2&gt;
&lt;p&gt;译名：时钟机关的Ley-line&lt;/p&gt;
&lt;p&gt;会社：ユニゾンシフト：ブロッサム&lt;/p&gt;
&lt;p&gt;Tag：汉化 傲娇&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;有人讲是三部曲，但我感觉是分割商法出的三部作品，所以应该当成同一部作品对待&lt;/p&gt;
&lt;p&gt;在第一部中，各种遗品剧情的插入感觉有点生硬，后面有所改观。剧情最后提了一点因果律，但没有继续深入&lt;/p&gt;
&lt;p&gt;总的来说，算是稳扎稳打，伏笔都能完整回收，剧情高潮时一气呵成，因此&lt;strong&gt;可能&lt;/strong&gt;缺乏一定的剧情深度&lt;/p&gt;
&lt;p&gt;最棒的是塑造了个完美的傲娇女主-憂緒，而且巨乳角色很少，治好了我的&lt;del&gt;晕奶&lt;/del&gt;。其他女主的恋爱戏份很少，几乎可以当只有憂緒一个女主。不过一些个人线玩起来很欢乐，比如眠子&lt;/p&gt;
&lt;h2 id=&#34;金色ラブリッチェ&#34;&gt;金色ラブリッチェ&lt;/h2&gt;
&lt;p&gt;译名：金辉恋曲四重奏&lt;/p&gt;
&lt;p&gt;会社：Saga Planets&lt;/p&gt;
&lt;p&gt;Tag: 汉化 废萌 后宫&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;玲奈线，感觉剧情浪费人设了😢&lt;/p&gt;
&lt;p&gt;3p先不谈，先打炮再表白感觉不爽，后半段剧情还一点镜头都没有，变成基友主场&lt;/p&gt;
&lt;p&gt;在&lt;a class=&#34;link&#34; href=&#34;https://bangumi.tv/subject/225784/comments&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bangumi吐槽区&lt;/a&gt;发现一处很符合我的想法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://bangumi.tv/user/548199&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;情弱弟&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;游艺dz，鉴定为：八成废萌。剩下两成是作者多次强调的：找到属于自己的金色时光，在这短暂的日子里不留遗憾地尽情“耍帅”。虽然升华了，但可能笔力有限，情感传达不到位，有点强行点题，显得说教意味偏浓了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和我以前写语文作文&lt;del&gt;强行点题那味了&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;rewrite&#34;&gt;Rewrite&lt;/h2&gt;
&lt;p&gt;译名：罚抄&lt;/p&gt;
&lt;p&gt;会社：Key&lt;/p&gt;
&lt;p&gt;FD：Rewrite Harvest festa!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;后劲很大&lt;/p&gt;
&lt;h2 id=&#34;はつゆきさくら&#34;&gt;はつゆきさくら&lt;/h2&gt;
&lt;p&gt;译名：初雪樱&lt;/p&gt;
&lt;p&gt;会社：Saga Planets&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;好像勉勉强强get到新岛夕说什么，但又没说什么。最后的毕业倒是有点煽情&lt;/p&gt;
&lt;p&gt;毕业的时候来栖老师说，把一堆麻烦塞给男主，其实是为了让他过上正常的校园生活，这一点我倒是很赞同(谁不想过上青春的校园生活)。不过本作的日常写的一般，而且黄段子属实尬，但女主面对黄段子的演出不错，属实浪费好画风和cv了&lt;/p&gt;
&lt;p&gt;不过相比魔女恋爱日记好的就是，起码把故事给我讲懂了&lt;/p&gt;
&lt;p&gt;大部分个人线感觉良好，除了シロクマ，完全意义不明。个人最喜欢あずま 夜&lt;/p&gt;
&lt;h2 id=&#34;clover-days&#34;&gt;Clover Day&amp;rsquo;s&lt;/h2&gt;
&lt;p&gt;译名：幸运草的约定&lt;/p&gt;
&lt;p&gt;会社：ALcot&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;治愈废萌，可爱就完事&lt;/p&gt;
&lt;h2 id=&#34;幼馴染と十年夏&#34;&gt;幼馴染と十年、夏&lt;/h2&gt;
&lt;p&gt;译名：幼驯染与十年之夏&lt;/p&gt;
&lt;p&gt;会社：夜のひつじ&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;短篇单线幼驯染作品，氛围不错，但我觉得还是太短了&lt;/p&gt;
&lt;h2 id=&#34;放課後シンデレラ&#34;&gt;放課後シンデレラ&lt;/h2&gt;
&lt;p&gt;译名：放学后的灰姑娘&lt;/p&gt;
&lt;p&gt;会社：HOOKSOFT&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;平平淡淡的废萌发糖作，共通线基本就是与女主深入了解交流（不点名批评某位女主，在共通线一直觉得操作很迷惑）&lt;/p&gt;
&lt;h2 id=&#34;primalhearts&#34;&gt;PRIMAL×HEARTS&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ymgal.com/ga21290&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;月幕&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译名：月色天娇&lt;/p&gt;
&lt;p&gt;会社：ま～まれぇど&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;也是比较平平淡淡废萌作品，一开始推了駒形线，感觉不是很对胃口&lt;/p&gt;
&lt;p&gt;其实进线前我是二选一，所以我直接冲向歌奈线&lt;/p&gt;
&lt;p&gt;不行了我，麻麻的，感觉身体有电流穿过，这就是恋爱么，而且还是小恶魔学姐，一直拖着不给男主告白，却又给男主尝了点甜头，实在是太刺激了&lt;/p&gt;
&lt;p&gt;个人线里的冲突事件都处理的很好，很快就完事了，没有高血压操作&lt;/p&gt;
&lt;h2 id=&#34;かりぐらし恋愛&#34;&gt;かりぐらし恋愛&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ymgal.com/ga27869&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;月幕&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译名：寄宿之恋&lt;/p&gt;
&lt;p&gt;会社：ASa Project&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;共通线够搞笑，个人线只推了理兎，平平淡淡的发糖&lt;/p&gt;
&lt;p&gt;群友告诉我，说不定其他线路有意想不到的剧情了，单线战士不可取（可恶，我是纯爱党）。所以我还是去推其他线了&lt;/p&gt;
&lt;p&gt;好家伙，几乎每条线都能看到理兎妒忌其他女主吃醋，这不让我更爱这个美少女么，呜呜&lt;/p&gt;
&lt;h2 id=&#34;すぃとはにふぁみり-娘ト妻ニ甘イハ父ノ習ヒ&#34;&gt;すぃ～と・はに～・ふぁみり～ 娘ト妻ニ甘イハ父ノ習ヒ&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ymgal.com/ga26948&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;月幕&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译名：甜蜜家庭～妻女和宠溺父亲的每一天～&lt;/p&gt;
&lt;p&gt;会社：オーバードーズ&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;拔作，老婆女儿孕肚play好耶&lt;/p&gt;
&lt;h2 id=&#34;レイジングループ&#34;&gt;レイジングループ&lt;/h2&gt;
&lt;p&gt;译名：人狼村之谜&lt;/p&gt;
&lt;p&gt;会社：KEMCO&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;日式狼人杀，故事看得很上头&lt;/p&gt;
&lt;h2 id=&#34;灰色系列&#34;&gt;灰色系列&lt;/h2&gt;
&lt;p&gt;会社：Frontwing&lt;/p&gt;
&lt;h3 id=&#34;グリザイアの果実&#34;&gt;グリザイアの果実&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ymgal.com/ga14935&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;月幕&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译名：灰色的果实&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;个人线都很赞，辛线是唯一看哭的（呜呜）&lt;/p&gt;
&lt;p&gt;蒔菜线，两个结局感觉都很痛苦（但拿狙击枪的美少女真的很帅啊，后续乐园还有狙击操作）&lt;/p&gt;
&lt;p&gt;天音线，懂得都懂，那段生存剧情确实很过瘾，动画制作组也懂，所以动画也花了很多精力去做这段剧情。最后面有段小高潮被人追杀，能互相为对方舍命，有点感动。好结局有一丝丝悲伤，毕竟，看到了美少女变老的场景，总觉得&lt;strong&gt;心&lt;/strong&gt;，哪里很难受&lt;/p&gt;
&lt;h3 id=&#34;グリザイアの迷宮&#34;&gt;グリザイアの迷宮&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ymgal.com/ga17410&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;月幕&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译名：灰色的迷宫&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;OP最好听&lt;/p&gt;
&lt;h3 id=&#34;グリザイアの楽園&#34;&gt;グリザイアの楽園&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ymgal.com/ga17392&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;月幕&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译名：灰色的乐园&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;战斗的美少女太帅啦&lt;/p&gt;
&lt;h2 id=&#34;フレラバ-friend-to-lover&#34;&gt;フレラバ ～Friend to Lover～&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ymgal.com/ga32221&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;月幕&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译名：从朋友到恋人&lt;/p&gt;
&lt;p&gt;会社：Smee&lt;/p&gt;
&lt;p&gt;FD：フレラバ 〜Friend to Lover〜 ミニファンディスク&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;甜死了甜死了，傲娇大好き&lt;/p&gt;
&lt;h2 id=&#34;いきなりサキュバス-いちゃらぶ搾精ライフ&#34;&gt;いきなりサキュバス ～いちゃらぶ搾精ライフ～&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ymgal.com/ga37630&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;月幕&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译名：&lt;/p&gt;
&lt;p&gt;会社：ZION&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;白丝巨乳萝莉魅魔，&lt;del&gt;魅魔星奏的发糖续作&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;chaoschild&#34;&gt;Chaos;Child&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ymgal.com/ga20473&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;月幕&lt;/a&gt;
/&lt;a class=&#34;link&#34; href=&#34;https://zh.moegirl.org.cn/Chaos;Child&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;萌娘百科&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译名：混沌之子&lt;/p&gt;
&lt;p&gt;会社：5pb.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;通关后感觉不是滋味，我实在与&lt;strong&gt;宮代 拓留&lt;/strong&gt;太像了，刚好看的一篇文章也令人深思&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/44592537&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;御宅族与ChaosChild症候群&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说的对，这就是部垃圾作品，痛击死宅罢了&lt;/p&gt;
&lt;h2 id=&#34;remember11--the-age-of-infinity-&#34;&gt;Remember11 -The Age of Infinity-&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ymgal.com/ga10794&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;月幕&lt;/a&gt;
/&lt;a class=&#34;link&#34; href=&#34;https://remember11.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中文版解密篇网站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译名：Remember11：无限轮回的时光&lt;/p&gt;
&lt;p&gt;会社：KID&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;从艺术方面看，即使解密篇没有出，但刚刚好完成了困住玩家的这个目标&lt;/li&gt;
&lt;li&gt;从商业作品看，确实是部不完整的作品&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但对于我来说，在我认为的神作中排第一&lt;/p&gt;
&lt;h2 id=&#34;ever17-the-out-of-infinity&#34;&gt;Ever17 —the out of infinity—&lt;/h2&gt;
&lt;p&gt;译名：Ever17—时空轮回&lt;/p&gt;
&lt;p&gt;会社：KID&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;约定好不要剧透&lt;/p&gt;
&lt;h2 id=&#34;出会って5分は俺のもの時間停止と不可避な運命&#34;&gt;出会って5分は俺のもの！時間停止と不可避な運命&lt;/h2&gt;
&lt;p&gt;译名：相遇之后的5分钟属于我！时间停止与不可避的命运&lt;/p&gt;
&lt;p&gt;会社：Hulotte&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;白毛萝莉妙啊&lt;/p&gt;
&lt;h2 id=&#34;キミのとなりで恋してる&#34;&gt;キミのとなりで恋してる&lt;/h2&gt;
&lt;p&gt;译名：慕情之心今随君作伴&lt;/p&gt;
&lt;p&gt;会社：ALcot ハニカム&lt;/p&gt;
&lt;p&gt;FD：キミのとなりで恋してる！ -THE RESPECTIVE HAPPINESS-&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;理想中的幼驯染&lt;/p&gt;
&lt;h2 id=&#34;車輪の国悠久の少年少女&#34;&gt;車輪の国、悠久の少年少女&lt;/h2&gt;
&lt;p&gt;译名：车轮之国：悠久之少男少女&lt;/p&gt;
&lt;p&gt;会社：AKABEiSOFT2&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;不会日语，还好早就被剧透了游戏的最后一句话，毕竟这句话是真的man&lt;/p&gt;
&lt;h2 id=&#34;車輪の国向日葵の少女&#34;&gt;車輪の国、向日葵の少女&lt;/h2&gt;
&lt;p&gt;译名：车轮之国：向日葵的少女&lt;/p&gt;
&lt;p&gt;会社：AKABEiSOFT2&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;05年画风也真好看&lt;/p&gt;
&lt;h2 id=&#34;g線上の魔王&#34;&gt;G線上の魔王&lt;/h2&gt;
&lt;p&gt;译名：G弦上的魔王&lt;/p&gt;
&lt;p&gt;会社：AKABEiSOFT2&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;带有叙诡类型的游戏玩的少，所以智斗代入感非常强，看的也很爽&lt;/p&gt;
&lt;h2 id=&#34;きまぐれテンプテーション&#34;&gt;きまぐれテンプテーション&lt;/h2&gt;
&lt;p&gt;译名：异想魅惑&lt;/p&gt;
&lt;p&gt;会社：Silky&amp;rsquo;s Plus WASABI&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;naizi好晃&lt;/p&gt;
&lt;h2 id=&#34;きゃらぶれーしょん-乙女は恋してキャラぶれる&#34;&gt;きゃらぶれーしょん！ ～乙女は恋してキャラぶれる～&lt;/h2&gt;
&lt;p&gt;译名：恋爱少女人格崩坏&lt;/p&gt;
&lt;p&gt;会社：AKABEiSOFT3&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;表里不一（&lt;/p&gt;
&lt;p&gt;&lt;del&gt;抖m狂喜&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;euphoria&#34;&gt;euphoria&lt;/h2&gt;
&lt;p&gt;译名：乐园&lt;/p&gt;
&lt;p&gt;会社：CLOCKUP&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第一次碰猎奇作品，感觉慢慢能接受？&lt;/p&gt;
&lt;h2 id=&#34;倉野くんちのふたご事情&#34;&gt;倉野くんちのふたご事情&lt;/h2&gt;
&lt;p&gt;译名：仓野家的双子情事&lt;/p&gt;
&lt;p&gt;会社：CUBE&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;妹妹可爱&lt;/p&gt;
&lt;h2 id=&#34;3days満ちてゆく刻の彼方で&#34;&gt;3days～満ちてゆく刻の彼方で～&lt;/h2&gt;
&lt;p&gt;译名：3days～在逝去时间的另一端～&lt;/p&gt;
&lt;p&gt;会社：Lass&lt;/p&gt;
&lt;p&gt;死了N次，还是得看攻略啊（&lt;/p&gt;
&lt;h2 id=&#34;君と彼女と彼女の恋&#34;&gt;君と彼女と彼女の恋&lt;/h2&gt;
&lt;p&gt;译名：你和她和她的恋爱&lt;/p&gt;
&lt;p&gt;会社：Nitro+&lt;/p&gt;
&lt;p&gt;打到困住轮回里就没怎么打了&lt;/p&gt;
&lt;h2 id=&#34;summer-pockets&#34;&gt;Summer Pockets&lt;/h2&gt;
&lt;p&gt;译名：夏日口袋&lt;/p&gt;
&lt;p&gt;会社：Key&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Key社换画师后画风好了很多&lt;/p&gt;
&lt;h2 id=&#34;恋シンアイ彼女&#34;&gt;恋×シンアイ彼女&lt;/h2&gt;
&lt;p&gt;译名：想要传达给你的爱恋&lt;/p&gt;
&lt;p&gt;会社：Us:track&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;彩音线好甜&lt;/p&gt;
&lt;h2 id=&#34;魔女こいにっき&#34;&gt;魔女こいにっき&lt;/h2&gt;
&lt;p&gt;译名：魔女恋爱日记&lt;/p&gt;
&lt;p&gt;会社：Qoobrand&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;故事没看懂&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;オトメドメイン&#34;&gt;オトメ＊ドメイン&lt;/h2&gt;
&lt;p&gt;译名：少女领域&lt;/p&gt;
&lt;p&gt;会社：Palette&lt;/p&gt;
&lt;h2 id=&#34;忘却執事と恋するお嬢様の回想録&#34;&gt;忘却執事と恋するお嬢様の回想録&lt;/h2&gt;
&lt;p&gt;译名：忘却管家与恋爱大小姐的回忆录&lt;/p&gt;
&lt;p&gt;会社：Campus&lt;/p&gt;
&lt;h2 id=&#34;僕と恋するポンコツアクマすっごいえっち&#34;&gt;僕と恋するポンコツアクマ。すっごいえっち&lt;/h2&gt;
&lt;p&gt;译名：与我恋爱的废材恶魔&lt;/p&gt;
&lt;p&gt;会社：Smile&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;太拔勒，虚了&lt;/p&gt;
&lt;h2 id=&#34;イブニクル&#34;&gt;イブニクル&lt;/h2&gt;
&lt;p&gt;译名：夏娃年代记1&lt;/p&gt;
&lt;p&gt;会社：Alicesoft&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;打怪升级玩上瘾了，已经三周目&lt;/p&gt;
</description>
        </item>
        <item>
        <title>记录安装arch的过程</title>
        <link>https://star-hengxing.github.io/p/%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85arch%E7%9A%84%E8%BF%87%E7%A8%8B/</link>
        <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85arch%E7%9A%84%E8%BF%87%E7%A8%8B/</guid>
        <description>&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机: Oracle VM VirtualBox&lt;/li&gt;
&lt;li&gt;笔记本：UEFI启动&lt;/li&gt;
&lt;li&gt;镜像: &lt;a class=&#34;link&#34; href=&#34;https://archlinux.org/download/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;了解UEFI还是BIOS启动，不同的启动方式对应不同的步骤&lt;/li&gt;
&lt;li&gt;基本的linux命令行操作和知识&lt;/li&gt;
&lt;li&gt;足够耐心&lt;/li&gt;
&lt;li&gt;善用archwiki&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;h3 id=&#34;联网&#34;&gt;联网&lt;/h3&gt;
&lt;p&gt;wifi配置麻烦，强烈建议网线或者手机usb联网&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ip link
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后ping查看联网是否成功&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ping baidu.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;更新系统时间&#34;&gt;更新系统时间&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timedatectl set-ntp &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timedatectl status &lt;span style=&#34;color:#6272a4&#34;&gt;# 检查服务状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;硬盘分区&#34;&gt;硬盘分区&lt;/h3&gt;
&lt;p&gt;硬盘分区工具有很多，推荐小白使用&lt;code&gt;cfdisk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看硬盘用&lt;code&gt;lsblk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在分区前，需了解swap(分区)，区别linux根分区和windows盘符的概念&lt;/p&gt;
&lt;p&gt;如果是UEFI启动，需要分一个EFI区，而BIOS则不用&lt;/p&gt;
&lt;p&gt;分区步骤大概就是：new-&amp;gt;分大小-&amp;gt;改类型-&amp;gt;保存-&amp;gt;格式化-&amp;gt;挂载&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EFI分区和正常分区格式化工具不一样&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;根分区需要首先挂载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;swap区看需求分(格式化和挂载是单独命令使用)&lt;/p&gt;
&lt;h3 id=&#34;添加国内镜像加速&#34;&gt;添加国内镜像加速&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vim /etc/pacman.d/mirrorlist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 添加&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Server&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; https://mirrors.tuna.tsinghua.edu.cn/archlinux/&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$repo&lt;/span&gt;/os/&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$arch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Server&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; https://mirrors.zju.edu.cn/archlinux/&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$repo&lt;/span&gt;/os/&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$arch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装基本包&#34;&gt;安装基本包&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pacstrap /mnt base linux linux-firmware
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在此步骤可以考虑把常用软件装了(vim/networkmanager/sudo)&lt;/p&gt;
&lt;h3 id=&#34;配置fstab&#34;&gt;配置Fstab&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cat /mnt/etc/fstab &lt;span style=&#34;color:#6272a4&#34;&gt;# 检查&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;change-root&#34;&gt;change root&lt;/h3&gt;
&lt;p&gt;切换到自己系统&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arch-chroot /mnt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;设置时区&#34;&gt;设置时区&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# Asia和Shanghai按需替换&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    hwclock --systohc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;设置locale&#34;&gt;设置Locale&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 把需要用的注释取消&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vim /etc/locale.gen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 当前使用的locale&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;LANG&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;en_US.UTF-8 &amp;gt;&amp;gt; /etc/locale.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 初始化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    locale-gen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;设置root密码&#34;&gt;设置root密码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    passwd &lt;span style=&#34;color:#6272a4&#34;&gt;# 密码不回显&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;网络配置&#34;&gt;网络配置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# myhostname替换自己主机名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; myhostname &amp;gt;&amp;gt; /etc/hostname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vim /etc/hosts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    添加  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    127.0.0.1	localhost  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ::1		    localhost  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    127.0.1.1	myhostname.localdomain	myhostname &lt;span style=&#34;color:#6272a4&#34;&gt;# 主机名.本地域名 主机名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装引导程序&#34;&gt;安装引导程序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;grub&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/113615452&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;不使用grub启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps:用这个方法前，假如你是intel-cpu，需要先安装intel-ucode&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bootctl install
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 添加&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vim /boot/loader/loader.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    default arch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timeout &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 添加&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vim /boot/loader/entries/arch.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    title   Arch Linux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    linux   /vmlinuz-linux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    initrd  /intel-ucode.img
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    initrd  /initramfs-linux.img
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    options &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;root&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;根分区路径 rw &lt;span style=&#34;color:#6272a4&#34;&gt;# 例如/dev/sda2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;重新启动&#34;&gt;重新启动&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    poweroff/reboot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;拔掉u盘，等待弹出tty终端，要求输入账户密码登录&lt;/p&gt;
&lt;p&gt;因为我是UEFI引导，所以笔记本需要更改启动方式为UEFI，而不使用BIOS，&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.viseator.com/2017/05/17/arch_install/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;以官方Wiki的方式安装ArchLinux&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>光线与各种几何图形求交</title>
        <link>https://star-hengxing.github.io/p/%E5%85%89%E7%BA%BF%E4%B8%8E%E5%90%84%E7%A7%8D%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E6%B1%82%E4%BA%A4/</link>
        <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E5%85%89%E7%BA%BF%E4%B8%8E%E5%90%84%E7%A7%8D%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E6%B1%82%E4%BA%A4/</guid>
        <description>&lt;p&gt;在一些基础的光线追踪教程中，光线求交通常发生在&lt;strong&gt;世界空间(world space)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但在离线渲染器中(比如PBRT)，光线求交发生在几何图形自己的&lt;strong&gt;局部空间(local/object/model space)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是有好处的，比如说简化求交代码，相交表面的&lt;code&gt;normal&lt;/code&gt;和&lt;code&gt;uv&lt;/code&gt;也很容易计算&lt;/p&gt;
&lt;p&gt;下面就记录一些几何求交的做法，自身经验有限，如有错误请指出&lt;/p&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这里采用的是y轴朝上的右手坐标系，-z轴指向屏幕里，x轴在右手&lt;/li&gt;
&lt;li&gt;默认光线已经变换到对象的局部空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用几何体的变换矩阵和其逆矩阵，求交时将光线变换到对象空间&lt;/p&gt;
&lt;p&gt;$$
Ray(t)=o+td (t &amp;gt; 0)
$$&lt;/p&gt;
&lt;p&gt;$$
Ray_{object}=M^{-1}Ray_{world}
$$&lt;/p&gt;
&lt;h2 id=&#34;矩形rectangle&#34;&gt;矩形(Rectangle)&lt;/h2&gt;
&lt;p&gt;假设矩形高度为&lt;code&gt;0&lt;/code&gt;，躺在&lt;code&gt;xz&lt;/code&gt;平面上。&lt;code&gt;长&lt;/code&gt;和&lt;code&gt;宽&lt;/code&gt;控制矩形大小&lt;/p&gt;
&lt;p&gt;忽略平行于平面的光线&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(is_zero(ray.direction.y)) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用高度计算相交点
$$
t=\frac{0 - o_{y}}{d_{y}}
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; t &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ray.inv_at&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Axis&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;Y&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; [x, y, z] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ray.at(t);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在矩形范围内的点才算相交成功&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;abs(x) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; length &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;abs(z) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; width) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;球sphere&#34;&gt;球(Sphere)&lt;/h2&gt;
&lt;p&gt;假设球心在&lt;strong&gt;原点&lt;/strong&gt;，&lt;strong&gt;半径&lt;/strong&gt;控制球的大小&lt;/p&gt;
&lt;p&gt;三维空间中球的一般方程
$$
x^{2}+y^{2}+z^{2}=r^{2}
$$&lt;/p&gt;
&lt;p&gt;将光线代入方程
$$
(o+td)^{2}=r^{2}
$$&lt;/p&gt;
&lt;p&gt;整理可得关于t的一元二次方程
$$
d^{2}t^{2}+2odt+o^{2}-r^{2}=0\
\begin{align*}
&amp;amp; a=d^{2}\
&amp;amp; b=2od\
&amp;amp; c=o^{2}-r^{2}
\end{align*}
$$&lt;/p&gt;
&lt;p&gt;假如光线的方向向量已经归一化，那么
$$
|\overrightarrow{d}|^{2}=1
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; dot(ray.origin, ray.direction);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; dot(ray.origin, ray.origin) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; radius &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; radius;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解一元二次方程，没有解则求交失败&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; quadratic(a, b, c);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;result) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有解则找到最近的交点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; [x1, x2] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; result.value();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; t &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; min(x1, x2);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;圆柱cylinder&#34;&gt;圆柱(Cylinder)&lt;/h2&gt;
&lt;p&gt;假设圆柱底面在&lt;code&gt;xz&lt;/code&gt;平面，底面圆心在&lt;strong&gt;原点&lt;/strong&gt;，&lt;strong&gt;半径&lt;/strong&gt;和&lt;strong&gt;高度&lt;/strong&gt;控制圆柱大小和长度，&lt;code&gt;phi&lt;/code&gt;表示圆柱曲面的完整度&lt;/p&gt;
&lt;p&gt;首先忽略y轴，求出相交点是否在圆柱底面&lt;/p&gt;
&lt;p&gt;圆柱底面的一般方程
$$
x^{2}+z^{2}=r^{2}
$$&lt;/p&gt;
&lt;p&gt;将光线代入，同理可得
$$
(d_{x}^{2}+d_{z}^{2})t^{2}+2(o_{x}d_{x}+o_{z}d_{z})t+o_{x}^{2}+o_{z}^{2}-r^{2}=0
$$&lt;/p&gt;
&lt;p&gt;日常解一元二次方程&lt;/p&gt;
&lt;p&gt;$$
\begin{align*}
&amp;amp; a = d_{x}^{2}+d_{z}^{2}\
&amp;amp; b = 2(o_{x}d_{x}+o_{z}d_{z})\
&amp;amp; c = o_{x}^{2}+o_{z}^{2}-r^{2}
\end{align*}
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; dx &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; dx &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dz &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; dz;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; (ox &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; dx &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; oz &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; dz);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ox &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; ox &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; oz &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; oz &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; radius &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; quadratic(a, b, c);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;result) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;计算相交点高度判断是否在范围内，先从最小&lt;code&gt;t&lt;/code&gt;开始&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; [x1, x2] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; result.value();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(x1 &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; x2) std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;swap(x1, x2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; t &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; x1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; [x, y, z] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ray.at(t);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; phi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;atan2(z, x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(phi &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) phi &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; PI&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;f32&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假如第一个&lt;code&gt;x1&lt;/code&gt;不符合条件，需要对&lt;code&gt;x2&lt;/code&gt;继续进行判断&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(y &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; min_height &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; y &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; max_height &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; phi &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; max_angle)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; x2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; [x, y, z] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ray.at(t);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    phi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;atan2(z, x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(phi &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) phi &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; PI&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;f32&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(y &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; min_height &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; y &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; max_height &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; phi &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; max_angle)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;小提示：当圆柱曲面不是&lt;strong&gt;封闭&lt;/strong&gt;的时候，所求相交点有可能在圆柱内部，这时需要反转(flip)法线才能进行正确的着色&lt;/p&gt;
&lt;h3 id=&#34;顶盖和底盖cap&#34;&gt;顶盖和底盖(Cap)&lt;/h3&gt;
&lt;p&gt;这时候圆柱求交算是基本完成了，但渲染的时候又发现一个问题，圆柱没有顶盖和底盖，也就是二维曲面并不是封闭的，因为圆柱体是一个退化的二维曲面&lt;/p&gt;
&lt;p&gt;这时候相当于加入了两个圆盘(Disk)&lt;/p&gt;
&lt;p&gt;如果在之前与圆柱曲面相交了，需要传入&lt;code&gt;t&lt;/code&gt;与这次求交所得&lt;code&gt;cap_t&lt;/code&gt;判断哪个最近&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; intersect &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;](f32 cap_t)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(cap_t &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; t &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; cap_t &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;check_cap(ray, cap_t)) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; cap_t;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以增加一个枚举变量&lt;code&gt;cylinder_shape&lt;/code&gt;，来表示需要圆柱的顶面/底面，或者说&lt;del&gt;我全都要&lt;/del&gt;也行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(cylinder_shape &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; cylinder_top)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    intersect(ray.inv_at&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Axis&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;Y&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;(max_height));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(cylinder_shape &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; cylinder_bottom)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    intersect(ray.inv_at&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Axis&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;Y&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;(min_height));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;圆盘求交也很简单
$$
x^{2}+z^{2} \leq r^{2}
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt; Cylinder&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;check_cap(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; Ray3f&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; ray, f32 t) &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ray.at&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Axis&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;X&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;(t);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; z &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ray.at&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Axis&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;Z&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;(t);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (x &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; z &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; z) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt; radius &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Physically Based Rendering: From Theory to Implementation&lt;/li&gt;
&lt;li&gt;The Ray Tracer Challenge&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>离线渲染-光线追踪框架学习资料</title>
        <link>https://star-hengxing.github.io/p/%E7%A6%BB%E7%BA%BF%E6%B8%B2%E6%9F%93-%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</link>
        <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://star-hengxing.github.io/p/%E7%A6%BB%E7%BA%BF%E6%B8%B2%E6%9F%93-%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</guid>
        <description>&lt;h2 id=&#34;games101现代计算机图形学入门&#34;&gt;GAMES101:现代计算机图形学入门&lt;/h2&gt;
&lt;p&gt;网课，可在&lt;a class=&#34;link&#34; href=&#34;https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/av90798049/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;b站&lt;/a&gt;上观看&lt;/p&gt;
&lt;p&gt;assignment 5-7 是光线追踪的作业&lt;br&gt;
如果对光栅化，几何，动画与模拟，不感兴趣，可以只看Lecture 13-20（个人建议：把整套课看完也是不错的）&lt;/p&gt;
&lt;h2 id=&#34;taichi课程&#34;&gt;Taichi课程&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/taichiCourse01/taichiCourse01&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;课程主页&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网课，其中6-7讲涉及光线追踪&lt;/p&gt;
&lt;h2 id=&#34;peter-shirley写的光线追踪三部曲&#34;&gt;Peter Shirley写的光线追踪三部曲&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ray Tracing in One Weekend&lt;/li&gt;
&lt;li&gt;Ray Tracing: The Next Week&lt;/li&gt;
&lt;li&gt;Ray Tracing: The Rest of Your Life&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书中配套代码，在网上能搜到这三本的笔记和翻译版本&lt;br&gt;
&lt;em&gt;我认为这是光线追踪入门的最好教程&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;daily-pathtracer&#34;&gt;Daily Pathtracer&lt;/h2&gt;
&lt;p&gt;Aras Pranckevičius大佬写的教程&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/37462611&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;介绍&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://aras-p.info/blog/2018/03/28/Daily-Pathtracer-Part-0-Intro/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;博客&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;nori&#34;&gt;Nori&lt;/h2&gt;
&lt;p&gt;an educational ray tracer&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://wjakob.github.io/nori/##guidelines&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;主页&lt;/a&gt;&lt;br&gt;
5个assignment&lt;/p&gt;
&lt;h2 id=&#34;pbrt&#34;&gt;PBRT&lt;/h2&gt;
&lt;p&gt;Physically Based Rendering:From Theory To Implementation&lt;br&gt;
这本书是学习离线渲染系统书（离线渲染圣经），配套代码在github上&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.pbrt.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;网上在线阅读&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;此为光线追踪进阶书籍&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;书&#34;&gt;书&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ray Tracing Gems&lt;/li&gt;
&lt;li&gt;Advanced global illumination&lt;/li&gt;
&lt;li&gt;Fundamentals of Computer Graphics&lt;/li&gt;
&lt;li&gt;Real-Time Rendering&lt;/li&gt;
&lt;li&gt;全局光照技术&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;杂类&#34;&gt;杂类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/zheng95z/fun-with-graphics##cg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github&lt;/a&gt;上收集的图形学资料&lt;/li&gt;
&lt;li&gt;milo yip的&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/miloyip/archive/2010/03/29/1698953.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;用JavaScript玩转计算机图形学-光线追踪入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.scratchapixel.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;scratchapixel&lt;/a&gt;，图形学网站，对细节讲解很详细，配套代码&lt;/li&gt;
&lt;li&gt;99行代码写出路径追踪-&lt;a class=&#34;link&#34; href=&#34;http://www.kevinbeason.com/smallpt/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;smallpt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.realtimerendering.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;real-time-rendering&lt;/a&gt;，网站内附带很多图形学资料&lt;/li&gt;
&lt;li&gt;mitsuba,一个开源渲染器&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://computergraphics.stackexchange.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stackexchange&lt;/a&gt;的计算机图形学板块&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
